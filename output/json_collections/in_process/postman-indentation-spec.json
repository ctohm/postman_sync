{
  "collection": {
    "info": {
      "_postman_id": "d1567aa2-add5-4c87-8ae8-c5f534b50e48",
      "name": "API MyDot Collection Tests v1.7.0 rev.22",
      "description": "## Definición del API MyDot, stable releave\n\n \n| Ambiente | VCS Branch                  | Documentación |\n|--------- | --------------------------- | --------------------------- |\n| production | [GitHub / master](https://github.com/TreidSPA/api.mydot.app/tree/master) | [master v1.3.6](https://docs.mydot.app?version=latest) |\n\n\n\nEsta documentación está destinada a los proveedores de desarrollo de la Aplicación MyDot y el Dashboard MyDot.\n\n### Referencia \n\nEl API está construído sobre el framework [Strongloop Loopback 3](https://loopback.io/doc/en/lb3), por lo cual ciertas funcionalidades no documentadas pueden consultarse en la documentación de dicho framework. \n\n\n----------------------- \n\n#### Filtros en Query String \n\nMuchos endpoints del API permiten manipular los resultados mediante la adición de un parámetro **{{filter}}** en el query string. (Véase [Loopback 3, Querying Data](https://loopback.io/doc/en/lb3/Querying-data.html#filters)) \n\nEste modificador permite: \n\n  - Restringir los campos de la respuesta [Fields Filter](https://loopback.io/doc/en/lb3/Fields-filter.html) \n  - Incluir entidades relacionadas anidadas en la respuesta [Include Filter](https://loopback.io/doc/en/lb3/Include-filter.html) \n  - Limitar cantidad de resultados [Limit filter](https://loopback.io/doc/en/lb3/Limit-filter.html) \n  - Ordenar según un campo de la respuesta [Order Filter](https://loopback.io/doc/en/lb3/Order-filter.html) \n  - Saltarse N elementos de una respuesta, para efectos de paginar [Skip Filter](https://loopback.io/doc/en/lb3/Skip-filter.html) \n  - Limitar las respuestas a un conjunto que cumpla ciertas condiciones [Where Filter](https://loopback.io/doc/en/lb3/Where-filter.html) \n\n### Definiciones\n\nLas siguientes definiciones aparecen recurrentemente en la descripción de los endpoints y parámetros utilizados en la aplicación:\n\n-----------------------\n\n#### Entidades primarias, secundarias y mixtas\n\n\n - **Entidad primaria**: es aquella que se expone directamente en el API\n\n     - ej, la entidad **Cliente**\n  \n\n  - **Entidad secundaria**: aquella que *no se expone directamente* sino que sólo puede accederse como propiedad de una entidad primaria.\n\n     - ej, la entidad **Dirección** sólo púede accederse cuando se alude a las direcciones de un **Cliente**\n \n  \n\n  - **Mixtas**: Existen entidades primarias que además pueden accederse como entidades secundarias, dado que su comportamiento cambia dependiendo de si están o no asociadas a otra entidad primaria en particular.\n\n     - ej: la entidad **Botón** puede accederse directamente (aludiendo a los botones sin dueño), pero también puede accederse en referencia a los botones de un **Cliente**. \n\n\n-----------------------\n\n#### {id} o :id\n\nAplica la llave primaria de la entidad principal. \n\n - Por ejemplo, en los endpoints de botones, la *instancia* del **Boton** con **id: 18FE34996BCD** se accede utilizando *{{api_test_url}}/api/Boton/18FE34996BCD*.\n\nEn adelante, se alude indistintamente a la llave primaria de una entidad como *id* o bien -para mayor claridad- añadiéndole el nombre de la entidad como sufijo. (ej *idBoton*).\n\n\n-----------------------\n\n\n#### {fk} o :fk\n\nAplica a la llave primaria de una entidad secundaria cuando se opera con ésta a través de una entidad primaria. Por ejemplo, la entidad **Dirección** *no se expone directamente como entidad primaria* sino sólo como una entidad secundaria de la entidad **Cliente**. \n \n - Ej: dada una entidad **Dirección** con **idDireccion: 25**,  perteneciante a una entidad **Cliente** con **id: 10**,  aquella direccción en particular se accede mediante *{{api_test_url}}/api/Cliente/10/direcciones/25*. \n\nEn adelante, se alude indistintamente a la llave primaria de una entidad secundaria como *fk* o bien -para mayor claridad- añadiéndole el nombre de la entidad como sufijo. (ej *idDireccion*).\n\n\n-----------------------\n\n\n#### rel o {rel}\n\nSe utiliza cuando un endpoint opera sobre una entidad implícita que hace de nexo entre dos entidades que tiene relación muchos a muchos (*ManyToMany*)\n\n - Ej: Un **Botón** puede tener muchas **Ventanas Horarias** y una Ventana Horaria estar asociada a muchos botones. \n\nPeticiones que modifican o eliminan este tipo de endpoints en realidad modifican la entidad puente que relaciona a la Ventana Horaria con los Botones. \n\nEste tipo de endpoints utiliza el **{{id}}** para identificar a la entidad del lado izquierdo y **{{fk}}** para la entidad del lado derecho. Ninguna de las dos sufre modificaciones directas en este tipo de endpoint.\n\n\n-----------------------\n\n\n#### Parámetros de endpoint (Path variables) y headers\n\nSe ha intentado describir explícitamente el significado de cada parámetro (e.g. **{{id}}**) y headers (e.g. **{{accessToken}}**) presente en los distintos endpoints.  El identificador de la entidad también se ha reemplazado por el **{{id}}** genérico para describir los payloads.\n\n-----------------------\n",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "name": "1_Cliente",
        "item": [
          {
            "name": "1_0_Login_y_lista",
            "item": [
              {
                "name": "1_0_0_Client: Login antes de tests",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc53677-ea3a-4906-b2b2-1763e9e00fea",
                      "type": "text/javascript",
                      "exec": [
                        "let currentUser = pm.variables.get('currentUser'),",
                        "    clientesObject = pm.variables.get('clientesObject');",
                        "",
                        "console.log('request test',{currentUser,clientesObject});",
                        "var schema = {",
                        "    tokenResponse: {",
                        "        \"type\": \"object\",",
                        "        \"properties\": {",
                        "            \"cliente\": {",
                        "                \"$ref\": \"MyDot#/definitions/Cliente\"",
                        "            },",
                        "            userId: {",
                        "                type: 'number'",
                        "            },",
                        "            accessToken: {",
                        "                type: 'string'",
                        "            },",
                        "            roles: {",
                        "                type: ['array']",
                        "            }",
                        "        }",
                        "    }",
                        "};",
                        "pm.test('Content-Type is application/json', function () {",
                        "    ",
                        "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "",
                        "    let {",
                        "        userId, user: {",
                        "            roles = [], ...cliente",
                        "        }, id: accessToken",
                        "    } = jsonData || {},",
                        "        tokenResponse = {",
                        "            userId, accessToken, cliente, roles",
                        "        };",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(tokenResponse, schema.tokenResponse);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "    });",
                        "    pm.test('Schema is an object', function() {",
                        "",
                        "",
                        "",
                        "        pm.expect(typeof accessToken).to.eql('string');",
                        "        pm.expect(typeof cliente).to.eql('object');",
                        "",
                        "        pm.expect(typeof userId).to.eql('number');",
                        "        pm.expect(typeof cliente.email).to.eql('string');",
                        "",
                        "        pm.environment.set('tokenCliente', accessToken);",
                        "        pm.environment.set('bearerToken', btoa(accessToken));",
                        "        pm.environment.set('accessToken', accessToken);",
                        "",
                        "        pm.variables.set('bearerToken', btoa(accessToken));",
                        "        pm.environment.set('accessToken', accessToken);",
                        "",
                        "        pm.environment.set('idCliente', userId);",
                        "        pm.environment.set('currentUserMail', cliente.email);",
                        "  pm.iterationData.set('idCliente', userId);",
                        "        pm.iterationData.set('currentUserMail', cliente.email);",
                        "  pm.iterationData.set('currentUser', currentUser);",
                        "        pm.iterationData.set('clientesObject', clientesObject);",
                        "",
                        "",
                        "",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310cb644-8a62-4d6d-a22c-7f3d0ea7fe63",
                      "type": "text/javascript",
                      "exec": [
                        "var currentUser = pm.variables.get('currentUser');",
                        "",
                        "let emailCliente1=pm.environment.get('emailCliente1'),",
                        "    passwordCliente1=pm.environment.get('passwordCliente1')",
                        "",
                        "pm.variables.set('currentUserMail', currentUser.email || emailCliente1);",
                        "pm.variables.set('currentUserPass', currentUser.pass ||passwordCliente1 );",
                        "",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "0527ef8b-b0d6-402d-a029-b25e35ec33de",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "noauth"
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"email\":\"{{currentUserMail}}\", \"password\":\"{{currentUserPass}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","login"],
                    "query": [
                      {
                        "description": "incluye datos del usuario en la respuesta",
                        "key": "include",
                        "value": "user"
                      },
                      {
                        "key": "",
                        "value": "",
                        "disabled": true
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_0_1_Listado de Clientes",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "656c6ca7-f4df-4e64-b931-7e17a44eccdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "04c6a736-1271-4e6b-8083-4d72426a0664",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente"]
                  },
                  "description": "Tiene la forma de un arreglo de un solo elemento: el cliente logueado"
                },
                "response": []
              },
              {
                "name": "1_0_2_Lista mis datos como cliente",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1dbda77-043c-483b-87b0-2ae26e0876b5",
                      "type": "text/javascript",
                      "exec": [
                        " pm.test('JSON response can be decoded ', function() {",
                        "     var jsonData = pm.response.json();",
                        "     pm.expect(jsonData).to.be.a('object');",
                        "",
                        "     pm.test('JSON response has id', function() {",
                        "         console.log('id:' + jsonData.id);",
                        "         pm.expect(jsonData.id).to.be.a('number');",
                        "         pm.environment.set('idCliente', jsonData.id);",
                        "     });",
                        "",
                        "     pm.test('JSON response has acess_token', function() {",
                        "",
                        "         let typeofAccessToken = typeof jsonData.access_token;",
                        "         pm.expect(typeofAccessToken).to.eql('string');",
                        "",
                        "         pm.environment.set('tokenCliente', jsonData.access_token);",
                        "         pm.environment.set('bearerToken', btoa(jsonData.access_token));",
                        "         pm.environment.set('accessToken', jsonData.access_token);",
                        "     });",
                        "",
                        "",
                        "     let mediopago_response = _.mediospagoByActivos(",
                        "         jsonData.mediospago, jsonData.id_mediopago_default",
                        "     );",
                        "",
                        "     _.each(mediopago_response, (value, key) => {",
                        "         if (value) {",
                        "             pm.environment.set(key, value);",
                        "         }",
                        "     });",
                        "",
                        "     let direccionObj = _.direccionesByBorrables(",
                        "         jsonData.direcciones,",
                        "         jsonData.id_direccion_default,",
                        "         {verbose:true}",
                        "     );",
                        "     pm.environment.set('direccionObj',direccionObj);",
                        "     ",
                        "",
                        " });"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "140e2ac3-6d02-4fcb-8d77-593bf633dd6c",
                      "type": "text/javascript",
                      "exec": [
                        "let filter = {",
                        "    include: [{",
                        "        relation: 'botones',",
                        "        scope: {",
                        "            fields: ['id', 'idEstado','idDireccion','idMediopago'],",
                        "        }",
                        "    }, {",
                        "        relation: 'mediospago',",
                        "        scope: {",
                        "            fields: ['id', 'idEstado'],",
                        "            include: {",
                        "                relation: 'botones',",
                        "                scope: {",
                        "                    fields: ['id', 'idDireccion','idMediopago'],",
                        "                }",
                        "            }",
                        "        }",
                        "    }, {",
                        "        relation: 'direcciones',",
                        "        scope: {",
                        "            fields: ['id',  'conCobertura'],",
                        "            include: {",
                        "                relation: 'botones',",
                        "                scope: {",
                        "                    fields: ['id', 'idDireccion','idMediopago'],",
                        "                }",
                        "            }",
                        "        }",
                        "    }]",
                        "};",
                        "let filter2 = {",
                        "    include: ['botones', 'direcciones', 'mediospago']",
                        "};",
                        "//pm.variables.set('filter',JSON.stringify(filter));",
                        "pm.variables.set('filter', JSON.stringify(filter));"
                      ]
                    }
                  }
                ],
                "_postman_id": "fc109233-9460-4d3b-940f-9ff8f79de60e",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "826b850e-dd26-4a06-b523-cf9c1c06a879",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "722becdb-9901-4bfc-af22-d22d89b384e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c2c3e9fc-7cfa-440b-b8b3-04c039d1b525",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content-Type is application/json', function () {",
                    "    ",
                    "   pm.expect(pm.response.headers.get('Content-Type')).to.include(pm.variables.get('expected_contentType'));",
                    "});"
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "1_1_Direcciones",
            "item": [
              {
                "name": "1_1_0_Agrega_una_direccion_al_Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4ad958e-f2ee-4786-9db8-dbc85c85e15f",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Direccion\"",
                        "};",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "    });",
                        "    direccionObj.id=jsonData.id;",
                        "    direccionObj.direcciones.push(jsonData.id);",
                        "    ",
                        "    pm.environment.set('direccionObj', direccionObj);",
                        "",
                        "",
                        "});"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c85b0a81-4fe9-4ac8-b2c4-3a3b26df9225",
                      "exec": [
                        "let nuevas_direcciones=[",
                        "\t{\"direccion\":\"Augusto Leguía Norte, Las Condes, Chile\",\"numero\":\"255\",\"lat\":-33.414699,\"lng\":-70.5979463},",
                        "{\"direccion\":\"Avenida Apoquindo 5950, Las Condes, Chile\",\"numero\":\"Piso 15\",\"lat\":-33.4090248,\"lng\":-70.5688699},",
                        "{\"direccion\":\"Avenida Apoquindo, Las Condes, Chile\",\"numero\":\"6797\",\"lat\":-33.4108191,\"lng\":-70.5742302},",
                        "{\"direccion\":\"Avenida Manquehue Norte 952, Las Condes, Chile\",\"numero\":\"Departamento 902\",\"lat\":-33.3996363,\"lng\":-70.5716402},",
                        "{\"direccion\":\"Avenida Presidente Riesco 7187, Las Condes, Chile\",\"numero\":\"7187\",\"lat\":-33.3972544,\"lng\":-70.5587748},",
                        "{\"direccion\":\"Benjamin 2940, Las Condes, Chile\",\"numero\":\"Depto 1002\",\"lat\":-33.4132526,\"lng\":-70.6012773},",
                        "{\"direccion\":\"Cerro Colorado 6028, Las Condes, Chile\",\"numero\":\"910\",\"lat\":-33.4007323,\"lng\":-70.5719202},",
                        "{\"direccion\":\"Cerro El Plomo 5420, Las Condes, Chile\",\"numero\":\"Oficina 1108\",\"lat\":-33.4057396,\"lng\":-70.5749252},",
                        "{\"direccion\":\"El Dante 4241, Las Condes, Chile\",\"numero\":\"401\",\"lat\":-33.4119582,\"lng\":-70.5880782},",
                        "{\"direccion\":\"Enrique Foster Norte 211, Las Condes, Chile\",\"numero\":\"402\",\"lat\":-33.4134333,\"lng\":-70.5945848},",
                        "{\"direccion\":\"Fray Luis de León 12281, Las Condes, Chile\",\"numero\":\"12281\",\"lat\":-33.3754726,\"lng\":-70.5174286},",
                        "{\"direccion\":\"Isidora Goyenechea, Las Condes, Chile\",\"numero\":\"3000\",\"lat\":-33.4142493,\"lng\":-70.5990251},",
                        "{\"direccion\":\"La Gioconda 4220, Las Condes, Chile\",\"numero\":\"72\",\"lat\":-33.4130798,\"lng\":-70.5874725},",
                        "{\"direccion\":\"Los Militares 5225, Las Condes, Chile\",\"numero\":\"605 \",\"lat\":-33.4080407,\"lng\":-70.5753435},",
                        "{\"direccion\":\"Luis Matte Larrain 9572\",\"numero\":\"9572\",\"lat\":-33.4054435,\"lng\":-70.5360806},",
                        "{\"direccion\":\"Neveria 5357, Las Condes, Chile\",\"numero\":\"5357\",\"lat\":-33.4120373,\"lng\":-70.5723819},",
                        "{\"direccion\":\"Rosario Norte 410, Las Condes, Chile\",\"numero\":\"141\",\"lat\":-33.4055874,\"lng\":-70.5725745},",
                        "{\"direccion\":\"Warren Smith 107, Las Condes, Chile\",\"numero\":\"Depto 155\",\"lat\":-33.4085403,\"lng\":-70.5747858}",
                        "],",
                        "nueva_direccion= nuevas_direcciones.getRandom(),",
                        "{direccion,numero,lat,lng}=nueva_direccion;",
                        "",
                        "pm.variables.set('new_direccion',direccion);",
                        "pm.variables.set('new_numero',numero);",
                        "pm.variables.set('new_lat',lat);",
                        "pm.variables.set('new_lng',lng);",
                        "",
                        "pm.environment.set('nuevas_direcciones',nuevas_direcciones);"
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "_postman_id": "1d1bc2ae-b02a-41f9-b3d8-905a772f7f7b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"direccion\": \"{{new_direccion}}\",\n    \"numero\": \"{{new_numero}}\",\n    \"lat\": \"{{new_lat}}\",\n    \"lng\": \"{{new_lng}}\"\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_1_1_Lista_Direcciones_de_Un_Cliente",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a606220-ddce-452f-a7a9-24367a735152",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "pm.variables.set('filter','');",
                        "let id_direccion_default =direccionObj.idPorDefecto;",
                        "    //postman.setNextRequest('Listado de Clientes');",
                        "pm.test('JSON response can be decoded', function() {",
                        "    let direcciones = pm.response.json();",
                        "    pm.expect(direcciones instanceof Array).to.be.true;",
                        "    pm.expect(direcciones.length > 0).to.be.true;",
                        "    var schema = {",
                        "        type: 'array',",
                        "        items: {",
                        "            $ref: 'MyDot#/definitions/Direccion'",
                        "        }",
                        "    };",
                        "    _.testSchema(direcciones, schema, 'Direcciones');",
                        "",
                        "",
                        "    const direcciones_response = _.direccionesByBorrables(",
                        "        direcciones,",
                        "        id_direccion_default",
                        "    );",
                        "    pm.environment.set('direccionObj',direcciones_response);",
                        "    console.log(direcciones_response);",
                        "    _.each(direcciones_response, (value, key) => {",
                        "        if (value) {",
                        "            pm.environment.set(`direccionObj.${key}`, value);",
                        "        }",
                        "    });",
                        "",
                        "",
                        "    let badIds = direcciones.filter(direccion => {",
                        "        return typeof direccion.id !== 'number'",
                        "    });",
                        "",
                        "    pm.expect(badIds.length).to.eq(0);",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31e5ca1f-f2dc-41c9-9423-3224cf3e6731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 400, 401, 403]);",
                        "",
                        "",
                        "let filter = {",
                        "    include: {",
                        "        relation: 'botones',",
                        "        scope: {",
                        "            fields: ['id', 'idDireccion', 'idMediopago', 'isActive'],",
                        "            where: {",
                        "                isActive: true",
                        "            }",
                        "        }",
                        "    }",
                        "};",
                        "pm.variables.set('filter', JSON.stringify(filter));"
                      ]
                    }
                  }
                ],
                "_postman_id": "f3d8c9b0-9bb5-4ee4-8ace-8d6c8353aa56",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Dado que la ventana horaria es ahora fija (despacho express) este endpoint incluye por defecto el costo de despacho"
                },
                "response": []
              },
              {
                "name": "1_1_2_Actualizar direcciones de un Cliente.",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbc99635-41ab-4512-9ef2-e8f166c815c2",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "let mensajes = ['Es una bodega','Hay un perro', 'Tiene alarma', 'El timbre está malo'];",
                        "",
                        "pm.variables.set('mensajeDireccion',mensajes.getRandom());",
                        "if (direccionObj.direcciones.length) {",
                        "    pm.variables.set('direccionObj.id', direccionObj.direcciones.getRandom());",
                        "}",
                        " "
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f66d68c0-f62b-45f2-bf3b-31813e115081",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Direccion\"",
                        "};",
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        " ",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "    direccionObj.id=jsonData.id;",
                        "    pm.environment.set('direccionObj', direccionObj);",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "f2a87fb3-df8d-47ec-8bfd-2b2e5467b348",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PUT",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n \"numero\": \"depto {{direccionObj.id}}\",\n \"instrucciones\": \"{{mensajeDireccion}}\",\n \"lng\": -70.5727403,\n  \"lat\": -33.413213\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{direccionObj.id}}",
                        "type": "string",
                        "description": "id Único de Dirección"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_1_3_Muestra la Dirección por Defecto de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fd594d2-a2e4-49bb-86ed-9384235b400c",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "",
                        "pm.variables.set('filter', '');",
                        "",
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Direccion\"",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "",
                        "    if (!direccionObj.direcciones.includes(jsonData.id)) {",
                        "        direccionObj.direcciones.push(jsonData.id);",
                        "    }",
                        "    if (!direccionObj.NoBorrables.includes(jsonData.id)) {",
                        "        direccionObj.NoBorrables.push(jsonData.id);",
                        "    }",
                        "    direccionObj.Borrables = direccionObj.Borrables.filter(direccion => {",
                        "        return !direccionObj.NoBorrables.includes(direccion);",
                        "    })",
                        "    if (!direccionObj.id) {",
                        "        direccionObj.id = jsonData.id;",
                        "    }",
                        "    direccionObj.idPorDefecto = jsonData.id;",
                        "    _.each(direccionObj, (value, key) => {",
                        "        if (value) {",
                        "            pm.environment.set(`direccionObj.${key}`, value);",
                        "        }",
                        "    });",
                        "    pm.environment.set('direccionObj', direccionObj);",
                        "",
                        "",
                        "",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02a5b096-3e73-49cb-be81-9d9693d6fc12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter',JSON.stringify({\"include\":[\"botones\"]}));",
                        "",
                        " "
                      ]
                    }
                  }
                ],
                "_postman_id": "53213891-52b7-450d-9bd7-9cb84579fd3b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direccion_default?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direccion_default"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_1_4_Eliminar Dirección",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36789f7e-3dde-4b1b-8277-e1b331f7cdc9",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "direccionObj.idEliminar = direccionObj.Borrables.spliceRandom();",
                        "",
                        "pm.variables.set('direccionObj.idEliminar', direccionObj.idEliminar);",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "direccionObj.direcciones = direccionObj.direcciones.filter(direccion => {",
                        "    return direccion !== direccionObj.idEliminar",
                        "});",
                        "",
                        "pm.environment.set('direccionObj', direccionObj);",
                        "",
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 204, 404, 401, 409]);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15a7e3a5-e441-4af0-aad9-8d12ff3aab95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 204\", function() {",
                        "    pm.response.to.have.status(204);",
                        "    let direcciones = pm.environment.get('direccionObj.direcciones'),",
                        "",
                        "        idDireccionEliminar = pm.variables.get('direccionObj.idEliminar');",
                        "",
                        "    let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "    pm.test('direcciones does not contain the direccion we just deleted', () => {",
                        "        pm.expect(direccionObj.direcciones).not.to.contain(idDireccionEliminar);",
                        "    });",
                        "    pm.test('direcciones Borrables does not contain the direccion we just deleted', () => {",
                        "        pm.expect(direccionObj.Borrables).not.to.contain(idDireccionEliminar);",
                        "    });",
                        "    direccionObj.direcciones = direccionObj.direcciones.filter(direccion => {",
                        "        return direccion !== idDireccionEliminar",
                        "    });",
                        "    direccionObj.Borrables = direccionObj.Borrables.filter(direccion => {",
                        "        return direccion !== idDireccionEliminar",
                        "    });",
                        "",
                        "    pm.environment.set('direccionObj', direccionObj);",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "7f3e329e-24be-450f-bbeb-b39552f2adaf",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{direccionObj.idEliminar}}",
                        "type": "string",
                        "description": "id Único de Dirección"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_1_5_Lista_direcciones_despues_de_borrar",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a606220-ddce-452f-a7a9-24367a735152",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "pm.variables.set('filter','');",
                        "let id_direccion_default =direccionObj.idPorDefecto;",
                        "    //postman.setNextRequest('Listado de Clientes');",
                        "pm.test('JSON response can be decoded', function() {",
                        "    let direcciones = pm.response.json();",
                        "    pm.expect(direcciones instanceof Array).to.be.true;",
                        "    pm.expect(direcciones.length > 0).to.be.true;",
                        "    var schema = {",
                        "        type: 'array',",
                        "        items: {",
                        "            $ref: 'MyDot#/definitions/Direccion'",
                        "        }",
                        "    };",
                        "    _.testSchema(direcciones, schema, 'Direcciones');",
                        "",
                        "",
                        "    const direcciones_response = _.direccionesByBorrables(",
                        "        direcciones,",
                        "        id_direccion_default",
                        "    );",
                        "    pm.environment.set('direccionObj',direcciones_response);",
                        "    console.log(direcciones_response);",
                        "    _.each(direcciones_response, (value, key) => {",
                        "        if (value) {",
                        "            pm.environment.set(`direccionObj.${key}`, value);",
                        "        }",
                        "    });",
                        "",
                        "",
                        "    let badIds = direcciones.filter(direccion => {",
                        "        return typeof direccion.id !== 'number'",
                        "    });",
                        "",
                        "    pm.expect(badIds.length).to.eq(0);",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31e5ca1f-f2dc-41c9-9423-3224cf3e6731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 400, 401, 403]);",
                        "",
                        "",
                        "let filter = {",
                        "    include: {",
                        "        relation: 'botones',",
                        "        scope: {",
                        "            fields: ['id', 'idDireccion', 'idMediopago', 'isActive'],",
                        "            where: {",
                        "                isActive: true",
                        "            }",
                        "        }",
                        "    }",
                        "};",
                        "pm.variables.set('filter', JSON.stringify(filter));"
                      ]
                    }
                  }
                ],
                "_postman_id": "abbf0bcb-4210-4caa-945f-85e64eb47211",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Dado que la ventana horaria es ahora fija (despacho express) este endpoint incluye por defecto el costo de despacho"
                },
                "response": []
              },
              {
                "name": "1_1_6_Intenta eliminar dirección por defecto",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36789f7e-3dde-4b1b-8277-e1b331f7cdc9",
                      "type": "text/javascript",
                      "exec": [
                        "    pm.variables.set('expectHeaders', [409]);",
                        "    pm.variables.set('expectError', 'any');",
                        "    ",
                        "    let direccionObj=pm.environment.get('direccionObj');",
                        "    ",
                        "    _.each(direccionObj, (value, key) => {",
                        "        if (value) {",
                        "            pm.variables.set(`direccionObj.${key}`, value);",
                        "        }",
                        "    });"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f130d46-1abe-4f9c-9705-589401a7ff51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 409 when trying to remove default direccion \"+pm.variables.get('direccionObj.idPorDefecto'), function () {",
                        "    pm.response.to.have.status(409);",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "002927c1-efa6-4624-9a6f-8797de6107c8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{direccionObj.idPorDefecto}}",
                        "type": "string",
                        "description": "id Único de Dirección"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_1_7_Buscar direcciones de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0eacaf6c-8e25-4b83-8f3a-a1aa09c7beaf",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Direccion\"",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "    pm.environment.set('direccionObj.id', jsonData.id);",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34932d2d-db9e-4e9a-a7ad-1a64c4f8937a",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "pm.variables.set('direccionObj.id', direccionObj.direcciones.getRandom());"
                      ]
                    }
                  }
                ],
                "_postman_id": "8348ab2f-edc3-41d6-9696-fe9cb4acf830",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/direcciones/:fk?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","direcciones",":fk"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{direccionObj.id}}",
                        "type": "string",
                        "description": "id Único de Dirección"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "9f061495-a0fd-4cb6-b62e-17d2c2fb31d4",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae2707ce-210c-4099-aa6b-bb36462cf44b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "38f5f665-2b26-4a95-81cd-f28565bc1144",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "1_2_Mediospago",
            "item": [
              {
                "name": "1_2_0_Lista Medios de Pago de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b01db26f-699b-4cf7-9b14-7def1416b260",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/MedioPago\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(jsonData, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "    });",
                        "",
                        "",
                        "    pm.test('Schema is an array', function() {",
                        "        pm.expect(jsonData instanceof Array).to.be.true;",
                        "        pm.expect(jsonData.length > 0).to.be.true;",
                        "",
                        "",
                        "    });",
                        "    let response = _.mediospagoByActivos(jsonData,  pm.environment.get('idMediopagoDefault'));",
                        "",
                        "    _.each(response, (value, key) => {",
                        "        pm.environment.set(key, value);",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22a8a629-e4ba-4235-b4b2-700246f5ae2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "1a0ad215-4dab-47fe-a205-504c2da12871",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/mediospago?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","mediospago"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_2_1_Listar datos de un medio de pago específico",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bd87269-28f8-418a-9cd9-749ec1b8b61c",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/MedioPago\"",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d42fc92-fade-4d5b-85a7-8b8a8c5c0c43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('idMediopago',pm.environment.get('mediosPagoActivos').getRandom());"
                      ]
                    }
                  }
                ],
                "_postman_id": "df9e5835-5342-47e6-adb2-1f260380fe5c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/mediospago/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","mediospago",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idMediopago}}",
                        "type": "string",
                        "description": "id Único de Medio de Pago"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_2_2_Muestra el Medio de Pago por defecto de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec07a99-5c6a-4d8b-9dbd-69c0953051cc",
                      "type": "text/javascript",
                      "exec": [
                        " let mediosPagoActivos = pm.environment.get('mediosPagoActivos') || [];",
                        " ",
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/MedioPago\"",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('number');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "     if (mediosPagoActivos.includes(jsonData.id)) {",
                        "        pm.environment.set('idMediopago', jsonData.id);",
                        "    }",
                        "    pm.test('medio de pago default '+jsonData.id+' is active',()=>{",
                        "       pm.expect(jsonData.idEstado).to.eq(1);",
                        "       pm.environment.set('idMediopagoDefault',jsonData.id);",
                        "    });",
                        "        ",
                        "    ",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "7ba2467e-89a5-4d40-a7d0-db717022b195",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/mediopago_default",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","mediopago_default"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_2_3_Eliminar Medio de Pago",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26812c1f-02ba-47c3-a7d4-e17570892b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('idMediopagoEliminar', pm.environment.get('idMediopago'));",
                        "let mediosPagoInActivos =pm.environment.get('mediosPagoInActivos')||[];",
                        "console.log(mediosPagoInActivos);",
                        "if(typeof mediosPagoInActivos === 'string') {",
                        " mediosPagoInActivos=   JSON.parse(mediosPagoInActivos);",
                        "}",
                        "",
                        "if (mediosPagoInActivos.length) {",
                        "    pm.variables.set('idMediopagoEliminar', mediosPagoInActivos.shift());",
                        "}"
                      ]
                    }
                  }
                ],
                "_postman_id": "b4529c21-c633-4757-a8ee-ebfe82a6f8db",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/mediospago/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","mediospago",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idMediopagoEliminar}}",
                        "type": "string",
                        "description": "id Único de Medio de Pago"
                      }
                    ]
                  },
                  "description": "Este método sólo ejecuta un soft-delete, marcando el idEstado como inactivo"
                },
                "response": []
              },
              {
                "name": "1_2_4_Intenta eliminar medio de pago por defecto",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26812c1f-02ba-47c3-a7d4-e17570892b85",
                      "type": "text/javascript",
                      "exec": [
                        "    pm.variables.set('expectHeaders', [409]);",
                        "    pm.variables.set('expectError', 'any');"
                      ]
                    }
                  }
                ],
                "_postman_id": "364d2eb7-91d8-48de-8683-f2772f6c2394",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/mediospago/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","mediospago",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idMediopagoDefault}}",
                        "type": "string",
                        "description": "id Único de Medio de Pago"
                      }
                    ]
                  },
                  "description": "Este método sólo ejecuta un soft-delete, marcando el idEstado como inactivo"
                },
                "response": []
              }
            ],
            "_postman_id": "e14bc44a-4f25-494a-8ac1-e16e81b09e71",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb62333a-ccb9-49d3-a488-fcc04bd51a76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce3fee40-a027-494a-95a5-bae1734d2d7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "1_3_Transacciones_webpay",
            "item": [
              {
                "name": "1_3_0_Lista transacciones_webpay de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3126d522-5d0e-4cca-8944-2cbd785e568e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('JSON response can be decoded and is an array', function() {",
                        "    var transacciones = pm.response.json();",
                        "",
                        "    pm.expect(transacciones instanceof Array).to.be.true;",
                        "",
                        "",
                        "    pm.expect(transacciones.length > 0).to.be.true;",
                        "    let transaccion = transacciones.pop();",
                        "    pm.expect(typeof transaccion.id === 'number').to.be.true;",
                        "",
                        "",
                        "    pm.environment.set('idTransaccion', transaccion.id);",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efcdd9a3-23c0-4247-8024-246b305ae46a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError','any')"
                      ]
                    }
                  }
                ],
                "_postman_id": "0b331bce-d77f-4c82-a03b-92b97d317c19",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/transacciones_webpay?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","transacciones_webpay"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string"
                      }
                    ]
                  },
                  "description": "Lista transacciones_webpay de un Cliente."
                },
                "response": []
              },
              {
                "name": "1_3_1_Busca una transacción por {idTransaccion}",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac664061-549b-4a98-bb53-497d98b8ede3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError','any');",
                        "pm.variables.set('expectHeaders',[200,301,304,401,404]);",
                        "let filter={",
                        "    include:['pedido']",
                        "};",
                        "filter={\"include\":[\"transaccion\"]};",
                        "pm.environment.set('transaccionFilter',JSON.stringify(filter));"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54b2ae72-75c8-4b47-b664-30113de117e2",
                      "type": "text/javascript",
                      "exec": [
                        "    pm.test('JSON response can be decoded', () => {",
                        "        if (pm.response.code < 400) {",
                        "",
                        "            pm.test('Response is an object', function() {",
                        "                var transaccion = pm.response.json();",
                        "                pm.expect(typeof transaccion.id === 'number').to.be.true;",
                        "                pm.environment.set('idTransaccion', transaccion.id);",
                        "            });",
                        "        } else {",
                        "            pm.test('Requesting a missing transaccion should throw an error', function() {",
                        "                var error = pm.response.json();",
                        "                pm.expect(error.name).to.be.a('string');",
                        "            });",
                        "        }",
                        "    });"
                      ]
                    }
                  }
                ],
                "_postman_id": "4935834a-bdc0-4cd0-a91e-ad49e11bc204",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/transacciones_webpay/:fk?filter={\"include\":[\"pedido\"]}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","transacciones_webpay",":fk"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{\"include\":[\"pedido\"]}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string"
                      },
                      {
                        "key": "fk",
                        "value": "{{idTransaccion}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "ab14ad75-e92e-4515-95fc-0c9b74e53f50",
            "_postman_isSubFolder": true
          },
          {
            "name": "1_4_Notification_token",
            "item": [
              {
                "name": "1_4_0_Lista los tokens de notificación del usuario",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ddd17ee-1c69-498c-81ea-aa045acdb3fb",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Content-Type is application/json', function () {",
                        "    ",
                        "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function () {",
                        "    var jsonData = pm.response.json(),",
                        "    isArray = jsonData instanceof Array,",
                        "    firstObject = jsonData[0];",
                        "    pm.expect(typeof firstObject).to.eq('object');",
                        "    pm.expect(isArray).to.be.true;",
                        "    ",
                        "    let {deviceId:notificationToken, platform: notificationPlatform}=firstObject;",
                        "    ",
                        "    pm.environment.set('notificationPlatform',notificationPlatform);",
                        "    pm.environment.set('notificationToken',notificationToken);",
                        "});",
                        "",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "68492307-9ca7-4b7a-a484-3502d8c2d612",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_4_1_Encuentra un device_id o notification_token por {id}",
                "_postman_id": "90a5870d-143e-4707-8a67-69c0fc45ce23",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{notificationToken}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "1_4_2_Registrar o actualiza un notificacion token",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9a0b880-a37e-4945-ab21-70820b96ebc7",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    pm.test('Content-Type is application/json', function () {",
                        "    ",
                        "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "       ",
                        "       pm.test('JSON response can be decoded', function () {",
                        "            var jsonData = pm.response.json();",
                        "            if(jsonData.deviceId) {",
                        "                pm.environment.set('notificationToken',jsonData.deviceId);",
                        "            }",
                        "        });",
                        "    ",
                        "    });",
                        "    ",
                        "    ",
                        "",
                        "});",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "63051b1c-2061-4045-8968-dad0be711ad7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"deviceId\": \"{{notificationToken}}\",\n  \"platform\": \"{{notificationPlatform}}\"\n  \n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Este método realiza un UPSERT por lo que se puede repetir el llamado sin generar errores. La funcionalidad es idéntica a la del método PATCH de este mismo endpoint"
                },
                "response": []
              },
              {
                "name": "1_4_3_Enviar mensaje push a un token en particular (ej: datamessage)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f35b79f0-e615-4373-ba48-8faf7584c001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError',true);"
                      ]
                    }
                  }
                ],
                "_postman_id": "f1b6cdee-861a-4784-ad22-d1a1cc2d91ef",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n\"data\":{\n\t\"notification_type\":\"pedido\"\n},\n\"notification\":{\n\t\"title\":\"hemos recibido tu pedido\",\n\t\"body\":\"Estoy probando solamente\"\n},\n\"token\":\"{{notificationToken}}\"\n\t\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/sendToDevice",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token","sendToDevice"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Este endpoint requiere especificar el token."
                },
                "response": []
              },
              {
                "name": "1_4_4_Enviar mensaje push a un token en particular (ej: notificación)",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "728891f4-67d1-48b9-9de9-6e0438d53b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError',true);"
                      ]
                    }
                  }
                ],
                "_postman_id": "dd018347-bf44-4ba9-a367-5adaf547efe8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"data\": {\n        \"notification_type\": \"pedido_en_proceso\",\n        \"idPedido\": \"437\",\n        \"id_pedido\": \"437\",\n        \"id_producto\": \"null\",\n        \"id_boton\": \"70F11C82E005\",\n        \"dashboard_title\": \"Actualización de Pedido #437\",\n        \"dashboard_body\": \"El pedido #437 ha pasado al estado \\\"En Proceso\\\" (Los operadores están preparando el pedido) \",\n        \"idEstado\": \"2\",\n        \"timestamp\": \"2019-08-11T20:08:53.399Z\"\n    },\n    \"notification\": {\n        \"title\": \"hemos recibido tu pedido\",\n        \"body\": \"Hemos recibido un pedido desde tu Dot Ariel, por un valor total de 10000.\"\n    },\n    \"dryRun\":true,\n    \"token\": \"{{notificationToken}}\"\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/sendToDevice",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token","sendToDevice"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Este endpoint requiere especificar el token."
                },
                "response": []
              },
              {
                "name": "1_4_5_Enviar mensaje push a todos los tokens activos del usuario",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26b14930-9ea7-4974-b434-e151b49a8a9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError',true);"
                      ]
                    }
                  }
                ],
                "_postman_id": "3d7d78ff-b0a3-431f-93a0-4405b6c86554",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"data\": {\n        \"notification_type\": \"dashboard_test\"\n    },\n    \"notification\": {\n        \"title\": \"hemos recibido tu pedido\",\n        \"body\": \"Estoy probando solamente\"\n    },\n    \"topic\":\"dashboard\",\n      \"dryRun\":false\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/sendToTopic",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token","sendToTopic"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  },
                  "description": "Este endpoint requiere especificar el token."
                },
                "response": []
              },
              {
                "name": "1_4_6_Elimina un device_id o notification_token por {id}",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f083d55-1a5d-4b93-aa16-168b2ceab234",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('fakeToken','abc');",
                        "pm.variables.set('expectError','any');",
                        "pm.variables.set('expectHeaders',[204,404,401]);",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "163316c4-022f-4802-ad17-3a9e262088c8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","notification_token",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{notificationToken}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "f45ed8eb-b628-4f4e-a7d2-8ae1003f9faa",
            "_postman_isSubFolder": true
          },
          {
            "name": "1_5_Modifica o crea un Cliente y persiste en BBDD.",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7c0ae070-c5a2-4066-99df-a0359d71f781",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "173e08b0-0c36-4532-9601-5e7207322902",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "e17c7e47-bed6-438c-9455-b9ed368303f7",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "PATCH",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "{{accessToken}}",
                  "disabled": true
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"nombre\": \"Felipe\",\n    \"apellido\": \"Figueroa\",\n    \"id_direccion_default\":\"{{direccionObj.id}}\",\n    \"id_mediopago_default\":\"{{idMediopago}}\",\n    \"despachoGratis\":0,\n    \"rut\":\"132331979\"\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/:id",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente",":id"],
                "variable": [
                  {
                    "key": "id",
                    "value": "{{idCliente}}",
                    "type": "string",
                    "description": "id Único de Cliente"
                  }
                ]
              }
            },
            "response": []
          },
          {
            "name": "1_6_Cliente Solicita restablecer contraseña enviando su dirección de email",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2059c6e8-743d-4538-92c8-666bee942ca7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "",
                    "",
                    "",
                    "pm.test('JSON response can be decoded ', function() {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.a('object');",
                    "",
                    "    pm.test('JSON response has idCliente', function() {",
                    "        console.log('idCliente:' + jsonData.idCliente);",
                    "        pm.expect(jsonData.idCliente).to.be.a('number');",
                    "        pm.expect(jsonData.email||jsonData.sentToEmail).to.be.a('string');",
                    "",
                    "     ",
                    "",
                    "        ",
                    "",
                    "    });",
                    "});",
                    "",
                    "let testsCarpeta = pm.variables.get('testsCarpeta');",
                    "console.log('============== FIN CARPETA Cliente con ' + testsCarpeta + ' tests ===================');",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d59d94cd-d127-44f6-aba0-b03d360511c8",
                  "type": "text/javascript",
                  "exec": [
                    "var emailCliente8 =   pm.environment.get('emailCliente8'),",
                    "    passwordCliente8 =  pm.environment.get('passwordCliente8');",
                    " ",
                    " ",
                    "if (pm.cookies.has('access_token')) {",
                    "    pm.cookies.unset('access_token');",
                    "}"
                  ]
                }
              }
            ],
            "_postman_id": "389f0906-242f-4257-82c4-39539f051fae",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{emailCliente8}}\",\n    \"dryRun\":true\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/reset",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","reset"]
              },
              "description": "Este endpoint espera el email de un cliente válido. a quien se enviará un link que contiene un token de **autenticación temporal**\n\nPinchando ese link llegaría a un formulario en la App en donde puede escribir su nueva contraseña.\n\nSi se exige la activación de cuentas, este endpoint arrojará error a los usuarios que no siguieron el link de activación previamente."
            },
            "response": []
          }
        ],
        "_postman_id": "28d2a8ea-78fb-4df3-bba5-2ee35ae67b48",
        "description": "Los endpoints de la entidad Cliente contienen comportamientos inherentes al funcionamiento de la plataforma MyDot, pero también contienen el clásico `CRUD de User`. \n\nEn particular, contiene endpoints activables sin autenticación con el propósito de:\n\n - Crear un usuario \n - Iniciar sesión (login)\n - Recuperar contraseña (mediante email + link con token temporal)\n - Activar una cuenta recién creada (mediante email + link con token temporal)\n - Registrarse o iniciar sesión con Facebook.\n\n\nEn su gran mayoría, todos los otros endpoints del API MyDot requieren estar autenticado, lo cual significa que esperan recibir un header `Authentication` con un `accessToken` válido. \n\n\n-----------\n\n\n#### Obtención y Manejo del AccessToken\n\n\nAl [iniciar sesión](#f0c5df24-ce62-483c-a5ff-f8f1a257e0c0), una operación exitosa contendrá un `accessToken` en el campo `id` del cuerpo de la respuesta:\n\n\n```json\n{\n  \"id\": \"WA7aNQA2r1LBnv5YcF7MaCbBAxFgquhBxjC9qXE8M4xFtanj08WB5uMCBApSOWut\",\n  \"...otros campos\": \"...otros valores\"\n}\n\n```\n\n\n\nEse `accessToken` puede usarse en forma literal, enviándolo como valor del  **header** `Authorization`:\n\n\n\n```\n\nAuthorization: WA7aNQA2r1LBnv5YcF7MaCbBAxFgquhBxjC9qXE8M4xFtanj08WB5uMCBApSOWut\n\n```\n\n---------------------\n\n\n#### Uso en formato Bearer Token\n\nEl API también soporta recibir el header de `Authorization` en formato  `Bearer Token`. Para esto el valor del token debe ir encodeado en base64 (ver [IETF#rfc6750](https://tools.ietf.org/html/rfc6750#section-2.1)) y con prefijo `Bearer`.\n\n\n```\n\nvar tokenBase64 =  btoa('WA7aNQA2r1LBnv5YcF7MaCbBAxFgquhBxjC9qXE8M4xFtanj08WB5uMCBApSOWut'),\n    authHeader = 'Bearer ' + tokenBase64;\n\n// Bearer V0E3YU5RQTJyMUxCbnY1WWNGN01hQ2JCQXhGZ3F1aEJ4akM5cVhFOE00eEZ0YW5qMDhXQjV1TUNCQXBTT1d1dA==\n\n```\n\n\nLa presente colección Postman utiliza el segundo formato para aprovechar la capaficad de definir la [autenticación a nivel de colecciones](https://learning.getpostman.com/docs/postman/sending_api_requests/authorization/#bearer-token) de Postman. \n\n\n------------------------\n\n",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5586bf3d-ed3d-4868-be9c-fe00439c3bee",
              "type": "text/javascript",
              "exec": [
                "",
                "",
                "",
                "",
                "",
                "// 01_1_Cliente_prerequest",
                "// 5586bf3d-ed3d-4868-be9c-fe00439c3bee",
                "",
                "",
                "",
                "// 01_1_Cliente_prerequest",
                "// 5586bf3d-ed3d-4868-be9c-fe00439c3bee",
                "",
                "",
                "",
                "",
                "",
                "_.direccionesByBorrables = (",
                "  direcciones,",
                "  idPorDefecto = null,",
                "  {verbose = false} = {}",
                ") => {",
                "  //_.testNonEmptyArray({direcciones});",
                "  pm.test('Direcciones is an array and  has at least 4 addresses', () => {",
                "    pm.expect(Array.isArray(direcciones)).to.be.true; // eslint-disable",
                "    pm.expect(direcciones.length >= 4).to.be.true; // eslint-disable",
                "  });",
                "  direcciones = _.shuffle(direcciones).map(direccion => {",
                "    let {id, botones = []} = direccion;",
                "    return {",
                "      id,",
                "      cant_botones: botones.filter(boton => boton.isActive).length",
                "    };",
                "  });",
                "  let direccionObj = {",
                "    direcciones,",
                "    idPorDefecto",
                "  };",
                "",
                "  direccionObj.idPorDefecto =",
                "    direccionObj.idPorDefecto ||",
                "    pm.environment.get('direccionObj.idPorDefecto') ||",
                "    direccionObj.direcciones.getRandom().id;",
                "",
                "  pm.environment.set(",
                "    'direccionObj.idPorDefecto',",
                "    1 * direccionObj.idPorDefecto",
                "  );",
                "  console.log({",
                "    idPorDefecto: direccionObj.idPorDefecto",
                "  });",
                "",
                "  direccionObj.NoBorrables = direccionObj.direcciones",
                "    .filter(direccion => {",
                "      return (",
                "        direccion.cant_botones || direccion.id === direccionObj.idPorDefecto",
                "      );",
                "    })",
                "    .map(direccion => 1 * direccion.id);",
                "",
                "  direccionObj.Borrables = direccionObj.direcciones",
                "    .filter(direccion => {",
                "      return !direccionObj.NoBorrables.includes(direccion.id);",
                "    })",
                "    .map(direccion => 1 * direccion.id);",
                "",
                "  if (direccionObj.NoBorrables.length < 2) {",
                "    direccionObj.NoBorrables.push(direccionObj.Borrables.spliceRandom());",
                "  }",
                "  direccionObj.direcciones = _.shuffle(",
                "    direccionObj.NoBorrables.slice(0).concat(direccionObj.Borrables)",
                "  );",
                "",
                "  _.testNonEmptyArray({",
                "    Borrables: direccionObj.Borrables,",
                "    NoBorrables: direccionObj.NoBorrables",
                "  });",
                "",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      idPorDefecto: direccionObj.idPorDefecto",
                "    },",
                "    {",
                "      NoBorrables: direccionObj.NoBorrables",
                "    },",
                "    {",
                "      Borrables: direccionObj.Borrables",
                "    }",
                "  );",
                "  //direccionesBorrables",
                "  //direccionesNoBorrables",
                "  //idDireccion",
                "",
                "  direccionObj.idEliminar = direccionObj.Borrables.getRandom();",
                "  direccionObj.id = _.shuffle(direccionObj.NoBorrables)",
                "    .filter(id => {",
                "      return id !== direccionObj.idPorDefecto;",
                "    })",
                "    .getRandom();",
                "",
                "  if (verbose) {",
                "    console.log(direccionObj);",
                "  }",
                "",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      id: direccionObj.id",
                "    },",
                "    {",
                "      NoBorrables: direccionObj.NoBorrables",
                "    },",
                "    {",
                "      Borrables: direccionObj.Borrables",
                "    }",
                "  );",
                "",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      idEliminar: direccionObj.idEliminar",
                "    },",
                "    {",
                "      Borrables: direccionObj.Borrables",
                "    },",
                "    {",
                "      NoBorrables: direccionObj.NoBorrables",
                "    }",
                "  );",
                "",
                "  return direccionObj;",
                "};",
                "_.mediospagoByActivos = (mediosPago, idMediopagoDefault) => {",
                "  _.testNonEmptyArray({",
                "    mediosPago",
                "  });",
                "",
                "  let mediosPagoActivos = _.shuffle(mediosPago)",
                "      .filter(medio => {",
                "        return (",
                "          typeof medio.id === 'number' &&",
                "          ((medio.boton && medio.boton.length) || medio.idEstado * 1 === 1)",
                "        );",
                "      })",
                "      .map(medio => medio.id),",
                "    mediosPagoInactivos = _.shuffle(mediosPago)",
                "      .filter(medio => {",
                "        return !mediosPagoActivos.includes(medio.id);",
                "      })",
                "      .map(medio => medio.id);",
                "",
                "  _.testNonEmptyArray({",
                "    mediosPagoActivos",
                "  });",
                "  _.testNonEmptyArray({",
                "    mediosPagoInactivos",
                "  });",
                "  idMediopagoDefault =",
                "    idMediopagoDefault ||",
                "    pm.environment.get('idMediopagoDefault') ||",
                "    mediosPagoActivos.getRandom();",
                "",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      idMediopagoDefault",
                "    },",
                "    {",
                "      mediosPagoActivos",
                "    },",
                "    {",
                "      mediosPagoInactivos",
                "    }",
                "  );",
                "",
                "  const idMediopagoEliminar = mediosPagoInactivos.getRandom(),",
                "    idMediopago = mediosPagoActivos",
                "      .filter(medioId => {",
                "        return medioId !== idMediopagoDefault;",
                "      })",
                "      .getRandom();",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      idMediopago",
                "    },",
                "    {",
                "      mediosPagoActivos",
                "    },",
                "    {",
                "      mediosPagoInactivos",
                "    }",
                "  );",
                "  _.testSetAndBelongsTo(",
                "    {",
                "      idMediopagoEliminar",
                "    },",
                "    {",
                "      mediosPagoInactivos",
                "    },",
                "    {",
                "      mediosPagoActivos",
                "    }",
                "  );",
                "",
                "  const response = {",
                "    mediosPagoActivos,",
                "    mediosPagoInactivos,",
                "    mediosPago,",
                "    idMediopagoEliminar,",
                "    idMediopagoDefault,",
                "    idMediopago",
                "  };",
                "  _.each(response, (value, key) => {",
                "    if (value) {",
                "      pm.environment.set(key, value);",
                "    }",
                "  });",
                "",
                "  console.log(response);",
                "  return response;",
                "};",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b81e7c2-b1ab-4b0b-99fb-f8b76fe28ca1",
              "type": "text/javascript",
              "exec": [
                "pm.environment.set('filter','');",
                "pm.variables.set('filter','');",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "2_Boton",
        "item": [
          {
            "name": "2_0_Tests Botones: Login y lista",
            "item": [
              {
                "name": "2_0_0_Botones: Login Antes de Tests",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc53677-ea3a-4906-b2b2-1763e9e00fea",
                      "type": "text/javascript",
                      "exec": [
                        "let currentUser = pm.variables.get('currentUser'),",
                        "    clientesObject = pm.variables.get('clientesObject');",
                        "if (typeof clientesObject === 'string') {",
                        "    clientesObject = JSON.parse(clientesObject || \"{}\");",
                        "}",
                        "",
                        "var schema = {",
                        "    tokenResponse: {",
                        "        \"type\": \"object\",",
                        "        \"properties\": {",
                        "            \"cliente\": {",
                        "                \"$ref\": \"MyDot#/definitions/Cliente\"",
                        "            },",
                        "            userId: {",
                        "                type: 'number'",
                        "            },",
                        "            accessToken: {",
                        "                type: 'string'",
                        "            },",
                        "            roles: {",
                        "                type: ['array']",
                        "            }",
                        "        }",
                        "    }",
                        "};",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "",
                        "    let {",
                        "        userId, user: {",
                        "            roles = [], ...cliente",
                        "        }, id: accessToken",
                        "    } = jsonData || {},",
                        "        tokenResponse = {",
                        "            userId, accessToken, cliente, roles",
                        "        };",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(tokenResponse, schema.tokenResponse);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "    });",
                        "    pm.test('userId is numeric and email is a string', function() {",
                        "",
                        "        pm.expect(userId).to.be.a('number');",
                        "        pm.expect(cliente.email).to.be.a('string');",
                        "",
                        "        _.each({",
                        "            currentUserMail: cliente.email,",
                        "            tokenCliente: accessToken,",
                        "            accessToken,",
                        "            bearerToken: btoa(accessToken),",
                        "            idCliente: userId",
                        "        }, (value, key) => {",
                        "            pm.environment.set(key, value);",
                        "            pm.variables.set(key, value);",
                        "        });",
                        "",
                        "",
                        "",
                        "    });",
                        "    pm.test('direccion and mediopago defaults are numeric', () => {",
                        "        let {",
                        "            id_direccion_default, id_mediopago_default",
                        "        } = cliente;",
                        "        ",
                        "        pm.expect(id_direccion_default).to.be.a('number');",
                        "        pm.expect(id_mediopago_default).to.be.a('number');",
                        "        let direccionObj=pm.environment.get('direccionObj');",
                        "        direccionObj.idPorDefecto=id_direccion_default;",
                        "        pm.environment.set('direccionObj', direccionObj);",
                        "        pm.environment.set('idMediopago', id_mediopago_default);",
                        "    })",
                        "",
                        "",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310cb644-8a62-4d6d-a22c-7f3d0ea7fe63",
                      "type": "text/javascript",
                      "exec": [
                        "let idCliente=1 || pm.variables.get('idCliente'),",
                        "    currentUser = pm.variables.get('currentUser');",
                        "",
                        "pm.variables.set('currentUserMail', pm.environment.get('emailCliente'+idCliente) ||  currentUser.email);",
                        "pm.variables.set('currentUserPass',pm.environment.get('passwordCliente'+idCliente) || currentUser.pass );",
                        "",
                        "",
                        "",
                        "pm.variables.set('testsCarpeta', 0);"
                      ]
                    }
                  }
                ],
                "_postman_id": "eb73f045-054f-4f2a-b65e-6590fca97428",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "noauth"
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"email\":\"{{currentUserMail}}\", \"password\":\"{{currentUserPass}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","login"],
                    "query": [
                      {
                        "description": "incluye datos del usuario en la respuesta",
                        "key": "include",
                        "value": "user"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_0_1_Lista completa de Marcas",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb85451-9ff0-4d00-8166-95dac824dcf1",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Content-Type is application/json', function () {",
                        "    ",
                        "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function () {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "    let marcas=jsonData.map(marca=>marca.id);",
                        "    ",
                        "    pm.environment.set('marcas',marcas);",
                        "    ",
                        "    let idMarca = marcas.getRandom();",
                        "    pm.expect(idMarca).to.be.a('number');",
                        "    ",
                        "       ",
                        "    pm.environment.set('idMarca',idMarca);",
                        "});",
                        "",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "488db96d-feae-410e-8497-50b21a8899a9",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Marca",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Marca"]
                  }
                },
                "response": []
              },
              {
                "name": "2_0_2_Lista completa de Botones (propios)",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92578aae-f97d-4e00-91be-deea5f99c466",
                      "type": "text/javascript",
                      "exec": [
                        "var botones;",
                        "pm.variables.set('filter','');",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    let jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "",
                        "    var schema = {",
                        "        \"type\": \"array\",",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Boton\"",
                        "        }",
                        "    };",
                        "    botones = jsonData.map(boton => {",
                        "        let {",
                        "            productos, ...cleanBoton",
                        "        } = boton;",
                        "        return cleanBoton;",
                        "    });",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "",
                        "",
                        "        let isValid = tv4.validate(botones, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "",
                        "    let botonesHabilitados = jsonData.filter(boton => {",
                        "        return boton.productos && boton.productos.length > 0 &&",
                        "            //boton.idMarca !== null &&",
                        "            boton.idMediopago !== null &&",
                        "            boton.idDireccion !== null;",
                        "    }).map(boton => boton.id),",
                        "    botonesDeshabilitados=botones.filter(boton=>{",
                        "        return !botonesHabilitados.includes(boton.id)",
                        "    }).map(boton=>boton.id);",
                        "",
                        "        ",
                        "    let idBoton = botonesHabilitados.getRandom();",
                        "    console.log({",
                        "        botonesHabilitados, idBoton",
                        "    });",
                        "    if (typeof idBoton === 'string') {",
                        "        pm.environment.set('idBoton', idBoton);",
                        "        pm.environment.set('botonesHabilitados', botonesHabilitados);",
                        "        pm.environment.set('botonesDeshabilitados', botonesDeshabilitados);",
                        "",
                        "        pm.iterationData.syncVariablesTo('cliente_botones', {",
                        "            botones",
                        "        });",
                        "        console.log(botones);",
                        "    }",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b698c20-daba-4fa5-acd7-33579fd27877",
                      "type": "text/javascript",
                      "exec": [
                        "let filter={",
                        "    include:[{",
                        "        relation:'productos',",
                        "        scope:{",
                        "            fields:['id','descripcion','idMarca','nombreMarca']",
                        "        }",
                        "    } ]",
                        "};",
                        "pm.variables.set('filter',JSON.stringify(filter));"
                      ]
                    }
                  }
                ],
                "_postman_id": "af319f64-22ab-4080-a61c-7afefba48f02",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_0_3_Encuentra un Botón por {idBoton} en la BBDD",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59ec70f7-96ab-4043-9774-e3adb72af2a5",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Boton\"",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.id).to.be.a('string');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "     pm.expect(jsonData.id).to.be.a.string;",
                        "     pm.environment.set('idBoton', jsonData.id);",
                        " });"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3042c2ca-3a91-42b3-bedb-7e84ff0504c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter','');"
                      ]
                    }
                  }
                ],
                "_postman_id": "c735872d-5395-4794-aed1-91e3ab217953",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_0_4_Lista botones disponibles de una Marca",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1cae827-f71a-4293-9664-9d73fcc5d312",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "    pm.test('JSON response can be decoded and is an array', function() {",
                        "        var jsonData = pm.response.json();",
                        "        pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "        if (jsonData.length) {",
                        "            let boton = jsonData.getRandom();",
                        "",
                        "            pm.expect(typeof boton.id).to.eq('string');",
                        "            pm.environment.set('idBotonDisponible', boton.id);",
                        "        }",
                        "    });",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc6110c0-58a4-40b2-993f-dfe578cb2d94",
                      "type": "text/javascript",
                      "exec": [
                        "let marcas=pm.environment.get('marcas'); ",
                        "pm.variables.set('idMarca',marcas.getRandom());"
                      ]
                    }
                  }
                ],
                "_postman_id": "60b45b9b-62ac-44de-afff-c45c2eee4257",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Marca/:id/botones_disponibles?filter={\"limit\":10}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Marca",":id","botones_disponibles"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{\"limit\":10}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idMarca}}",
                        "type": "string",
                        "description": "id Único de Marca"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_0_5_Inscribe un botón a nombre del usuario",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4344ac25-5467-40b3-b6c7-c045960f9cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code is 200', function() {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "",
                        "    pm.test('Content-Type is application/json', function() {",
                        "",
                        "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "",
                        "        var schema = {",
                        "            \"$ref\": \"MyDot#/definitions/Boton\"",
                        "        };",
                        "",
                        "",
                        "",
                        "",
                        "        pm.test('JSON response can be decoded', function() {",
                        "            var jsonData = pm.response.json();",
                        "            pm.expect(jsonData.id).to.be.a('string');",
                        "",
                        "            pm.test('Schema is valid', function() {",
                        "                let isValid = tv4.validate(jsonData, schema);",
                        "                if (!isValid) {",
                        "                    console.warn(tv4.error);",
                        "                }",
                        "                pm.expect(isValid).to.be.true;",
                        "",
                        "            });",
                        "            pm.environment.set('idBoton', jsonData.id);",
                        "        });",
                        "",
                        "",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88653fc0-ac8f-49ae-bba5-ce6360048c11",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj'),",
                        "    idDireccion = direccionObj.Borrables.spliceRandom();",
                        "",
                        "",
                        "direccionObj.id = idDireccion;",
                        "",
                        "direccionObj.NoBorrables.push(idDireccion);",
                        "",
                        "pm.environment.set('direccionObj', direccionObj);",
                        "",
                        "pm.variables.set('direccionObj.id', idDireccion);",
                        "",
                        "",
                        "pm.variables.set('idBotonInactivo', pm.environment.get('botonesDeshabilitados').getRandom());",
                        "let idMediopago = pm.variables.get('idMediopago');",
                        "",
                        "let mediosPagoActivos = pm.environment.get('mediosPagoActivos') || [];",
                        "",
                        "if (mediosPagoActivos.length) {",
                        "    idMediopago = mediosPagoActivos.getRandom();",
                        "    pm.variables.set('idMediopago', idMediopago);",
                        "    pm.environment.set('idMediopago', idMediopago);",
                        "}"
                      ]
                    }
                  }
                ],
                "_postman_id": "4a00bab3-9838-4461-b3c7-24bbf120aee3",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"id\": \"70F11C82E258\",\n    \"idDireccion\":\"{{direccionObj.id}}\",\n    \"idMediopago\":\"{{idMediopago}}\"\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/claim?",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton","claim"],
                    "query": [
                      {
                        "key": " no_owner",
                        "value": "4463CB0B0E07",
                        "disabled": true
                      },
                      {
                        "key": " owner",
                        "value": "18FE34996BCD",
                        "disabled": true
                      },
                      {
                        "key": " other user",
                        "value": " 70F11C087451",
                        "disabled": true
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** La inscripción de un botón puede hacerse mediante `PATCH /api/Boton/{idBoton}` que implícitamente le fija el id del Cliente\n\nEste método custom se considera redundante y puede ser removido en futuras versiones"
                },
                "response": []
              },
              {
                "name": "2_0_6_Intenta inscribir un botón ajeno",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4344ac25-5467-40b3-b6c7-c045960f9cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code reflects an error', function() {",
                        "",
                        "    pm.expect(pm.response).not.to.have.status(200);",
                        "",
                        "",
                        "    pm.test('Content-Type is application/json', function() {",
                        "",
                        "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "",
                        "",
                        "",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88653fc0-ac8f-49ae-bba5-ce6360048c11",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj') || {},",
                        "    direcciones = direccionObj.direcciones || [];",
                        "if (direcciones.length) {",
                        "    let idDireccion = direcciones.getRandom();",
                        "",
                        "    pm.environment.set('direccionObj.id', idDireccion);",
                        "    pm.variables.set('direccionObj.id', idDireccion);",
                        "}",
                        "pm.variables.set('idMediopago', pm.environment.get('idMediopago'));",
                        "",
                        "let mediosPagoActivos = pm.environment.get('mediosPagoActivos') || [];",
                        "",
                        "if (mediosPagoActivos.length) {",
                        "    let idMediopago = mediosPagoActivos.getRandom();",
                        "    pm.variables.set('idMediopago', idMediopago);",
                        "}",
                        "",
                        "pm.environment.set('boton_Wrongid', '70F11C82E13C');",
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 400, 401, 403, 404]);"
                      ]
                    }
                  }
                ],
                "_postman_id": "1aeff9e1-9d54-4e6b-b9a8-99c8d821daf9",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"{{boton_Wrongid}}\",\n    \"idMediopago\": \"{{idMediopago}}\",\n    \"idDireccion\": \"{{direccionObj.id}}\"\n  \n  \n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/claim?",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton","claim"],
                    "query": [
                      {
                        "key": " no_owner",
                        "value": "4463CB0B0E07",
                        "disabled": true
                      },
                      {
                        "key": " owner",
                        "value": "18FE34996BCD",
                        "disabled": true
                      },
                      {
                        "key": " other user",
                        "value": " 70F11C087451",
                        "disabled": true
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** La inscripción de un botón puede hacerse mediante `PATCH /api/Boton/{idBoton}` que implícitamente le fija el id del Cliente\n\nEste método custom se considera redundante y puede ser removido en futuras versiones"
                },
                "response": []
              },
              {
                "name": "2_0_7_Busca un boton ajeno",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59ec70f7-96ab-4043-9774-e3adb72af2a5",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData.code).to.be.a('string');",
                        " ",
                        " });"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3042c2ca-3a91-42b3-bedb-7e84ff0504c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter','');",
                        "    pm.variables.set('expectError', 'any');",
                        "",
                        "    pm.variables.set('expectHeaders', [404]);"
                      ]
                    }
                  }
                ],
                "_postman_id": "6d96efea-46b5-40a2-a7a5-8978fc144e05",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{boton_Wrongid}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "5678aa39-9d8d-4f77-8306-505464aaaee0",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c712b243-0d71-4eca-95ad-000caf693178",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e65b5ed-7871-43c0-9066-7b87c66964c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "2_1_Botones del cliente",
            "item": [
              {
                "name": "2_1_0_Lista botones de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a93f05ea-f039-42df-a5ed-c2ca1e4b8169",
                      "type": "text/javascript",
                      "exec": [
                        "var botones;",
                        "pm.variables.set('filter','');",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    let jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "",
                        "    var schema = {",
                        "        \"type\": \"array\",",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Boton\"",
                        "        }",
                        "    };",
                        "    botones = jsonData.map(boton => {",
                        "        let {",
                        "            productos, ...cleanBoton",
                        "        } = boton;",
                        "        return cleanBoton;",
                        "    });",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "",
                        "",
                        "        let isValid = tv4.validate(botones, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "",
                        "    let botonesHabilitados = jsonData.filter(boton => {",
                        "        return boton.productos && boton.productos.length > 0 &&",
                        "            boton.idMarca !== null &&",
                        "            boton.idMediopago !== null &&",
                        "            boton.idDireccion !== null;",
                        "    }).map(boton => boton.id);",
                        "",
                        "    let idBoton = botonesHabilitados[Math.floor(botonesHabilitados.length * (Math.random() * 0.999))];",
                        "    console.log({",
                        "        botonesHabilitados, idBoton",
                        "    });",
                        "    if (typeof idBoton === 'string') {",
                        "        pm.environment.set('idBoton', idBoton);",
                        "        pm.environment.set('botones', botonesHabilitados);",
                        "",
                        "        pm.iterationData.syncVariablesTo('cliente_botones', {",
                        "            botones",
                        "        });",
                        "        console.log(botones);",
                        "    }",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a121be7-37fd-4253-8521-ac4f6baeab30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter',JSON.stringify({\"include\":[\"productos\"]}));"
                      ]
                    }
                  }
                ],
                "_postman_id": "a1c88e05-2fbf-4fa1-bda7-2b256c208ff6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/botones?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","botones"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_1_1_Buscar botones de un Cliente por iD",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be0e70d0-5082-47a9-9ca1-55975a7ac54f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    pm.test('Content-Type is application/json', function () {",
                        "        ",
                        "       pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "       ",
                        "       ",
                        "        pm.test('JSON response can be decoded', function () {",
                        "            var jsonData = pm.response.json(),",
                        "            isNumber=typeof jsonData.id === 'string';",
                        "            ",
                        "            pm.expect(isNumber).to.be.true;",
                        "            pm.expect(jsonData.id.length).to.equal(12);",
                        "            pm.environment.set('idBoton',jsonData.id);",
                        "        });",
                        "    ",
                        "    ",
                        "    });",
                        "",
                        "});",
                        "//postman.setNextRequest('Lista direcciones de un Cliente.');"
                      ]
                    }
                  }
                ],
                "_postman_id": "3f26a232-b9a6-4efe-a680-706d208c089c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/botones/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","botones",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_1_2_Actualizar botones de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "564f8339-74cc-407b-b4e5-3453c85499a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    pm.test('Content-Type is application/json', function () {",
                        "        ",
                        "       pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "       ",
                        "       ",
                        "        pm.test('JSON response can be decoded', function () {",
                        "            var jsonData = pm.response.json(),",
                        "            isNumber=typeof jsonData.id === 'string';",
                        "            ",
                        "            pm.expect(isNumber).to.be.true;",
                        "            pm.expect(jsonData.id.length).to.equal(12);",
                        "            pm.environment.set('idBoton',jsonData.id);",
                        "        });",
                        "    ",
                        "    ",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb992d46-070a-435d-8519-637de0e1b1d3",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj'),",
                        "    idDireccion = direccionObj.Borrables.spliceRandom();",
                        "",
                        "direccionObj.idDireccion = idDireccion;",
                        "direccionObj.NoBorrables.push(idDireccion);",
                        "pm.environment.set('direccionObj', direccionObj);",
                        "",
                        "pm.variables.set('direccionObj.id', idDireccion);",
                        "",
                        "",
                        "let idMediopago = pm.variables.get('idMediopago');",
                        "",
                        "let mediosPagoActivos = pm.environment.get('mediosPagoActivos') || [];",
                        "",
                        "if (mediosPagoActivos.length) {",
                        "    idMediopago = mediosPagoActivos.getRandom();",
                        "    pm.variables.set('idMediopago', idMediopago);",
                        "    pm.environment.set('idMediopago', idMediopago);",
                        "}"
                      ]
                    }
                  }
                ],
                "_postman_id": "bc8cc50d-2670-4b92-82b8-bef1b9f2d574",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PUT",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \n    \"idMediopago\": \"{{idMediopago}}\",\n    \"idDireccion\": \"{{direccionObj.id}}\",\n    \"isActive\": true\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/botones/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","botones",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_1_3_Verifica si un botón ya ha sido inscrito por este u otro cliente",
                "_postman_id": "7e7763a6-fa6b-4d7e-88f7-38234d35dcd4",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/isButtonClaimed/:idBoton",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","isButtonClaimed",":idBoton"],
                    "variable": [
                      {
                        "key": "idBoton",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de botón"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Dado que un llamado a `GET api/Boton/{idBoton}` cumple la misma función que\n\neste método custom, se considera redundante y será removido en futuras versiones."
                },
                "response": []
              },
              {
                "name": "2_1_4_Resumen completo del botón",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa7232c8-05ea-400e-ad23-021710438def",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "",
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "    ",
                        "    ",
                        "    pm.test(\"Content-Type is application/json\", function () {",
                        "        ",
                        "       pm.expect(pm.response.headers.get(\"Content-Type\")).to.include('application/json');",
                        "       ",
                        "       ",
                        "        pm.test(\"JSON response can be decoded\", function () {",
                        "            var jsonData = pm.response.json(),",
                        "            isString=typeof jsonData.id === 'string';",
                        "            ",
                        "            pm.expect(isString).to.be.true;",
                        "            pm.environment.set(\"idBoton\",jsonData.id);",
                        "        });",
                        "    ",
                        "    ",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "b8c3639c-858d-48e9-9757-84c4e2d70839",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/resumen",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","resumen"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "6ba6eff8-a7bb-49ca-99ad-0bb912b681c3",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ee5302a-fde7-46d1-86fe-5673b5ea8224",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "095768a9-d3fe-49a9-b311-45aa9750e0e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "2_2_Productos",
            "item": [
              {
                "name": "2_2_0_Lista Productos de un Botón",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8099e14a-6cc2-4641-8a4b-abbb3213954a",
                      "type": "text/javascript",
                      "exec": [
                        "if (pm.cookies.has('access_token')) {",
                        "    let idBoton = pm.environment.get('idBoton');",
                        "",
                        "    var schema = {",
                        "        \"type\": \"array\",",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Producto\"",
                        "        }",
                        "",
                        "    };",
                        "",
                        "",
                        "    pm.test('Response is JSON and is Array', function() {",
                        "        var jsonData = pm.response.json();",
                        "        pm.expect(jsonData instanceof Array).to.be.true;",
                        "        let productos = jsonData.map(producto => {",
                        "            let {",
                        "                idProducto: id,",
                        "                ...productoProps",
                        "            } = producto;",
                        "            producto={id};",
                        "            return Object.assign(producto,productoProps);",
                        "            ",
                        "        }",
                        "        );",
                        "        pm.test('Schema is valid', function() {",
                        "            let isValid = productos.length===0 || tv4.validate(productos, schema);",
                        "            if (!isValid) {",
                        "                console.warn(tv4.error);",
                        "            }",
                        "            pm.expect(isValid).to.be.true;",
                        "",
                        "            pm.environment.set('idProducto', jsonData[0].id);",
                        "        });",
                        "",
                        "        let productosDelBoton = [];",
                        "        jsonData.forEach((producto, index) => {",
                        "            index = index || '';",
                        "            productosDelBoton.push(producto.idProducto);",
                        "            if (!index) {",
                        "                pm.environment.set('mainProduct'+ idBoton, producto.idProducto);",
                        "            }",
                        "            pm.environment.set('idProducto'+ index, producto.idProducto);",
                        "        });",
                        "",
                        "        pm.environment.set('productosBoton'+ idBoton, productosDelBoton);",
                        "        pm.environment.set('cantidadProductos', productosDelBoton.length);",
                        "",
                        "    });",
                        "} else {",
                        "    postman.setNextRequest('Botones: Login Antes de Tests');",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79a9d422-1fb9-49b7-b47d-6c34bd16cfa1",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "if (!pm.cookies.has('access_token')) {",
                        "    pm.variables.set('expectError', 'any');",
                        "    pm.variables.set('expectHeaders', [200, 400, 401, 403]);",
                        "}"
                      ]
                    }
                  }
                ],
                "_postman_id": "503c4441-4ebb-4c01-8e30-09d71e21983c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/productos",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","productos"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_2_1_Devuelve los productos que se pueden asociar a un botón",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2846657b-f946-48ef-ab22-668893c3a783",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code is 200', function() {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Content-Type is application/json', function() {",
                        "",
                        "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "let idBoton = pm.environment.get('idBoton'),",
                        "    mainProduct = pm.environment.get('mainProduct' + idBoton),",
                        "    productosDelBoton = pm.environment.get('productosBoton' + idBoton) || [];",
                        "",
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(jsonData, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "    });",
                        "    pm.test('Schema is an array', function() {",
                        "        var isArray = jsonData instanceof Array;",
                        "        pm.expect(isArray).to.be.true;",
                        "",
                        "",
                        "        pm.environment.set('productosAgregables', jsonData.map(prod => prod.id));",
                        "        if (productosDelBoton.length && productosDelBoton.length > 2) {",
                        "            pm.iterationData.set('productosAgregables', productosDelBoton);",
                        "            pm.environment.set('idProducto', (productosDelBoton.pop()));",
                        "        } else {",
                        "            let productosDistintosAlActual = jsonData.filter(producto => {",
                        "                return !(productosDelBoton || []).includes(producto.id);",
                        "            }).map(producto => producto.id);",
                        "            pm.iterationData.set('productosAgregables', productosDistintosAlActual);",
                        "",
                        "            productosDistintosAlActual = productosDelBoton.concat(productosDistintosAlActual);",
                        "",
                        "",
                        "            pm.environment.set('idProducto', (productosDistintosAlActual.pop()));",
                        "        }",
                        "",
                        "    });",
                        "});",
                        "//postman.setNextRequest('Añadir Productos a un Botón.');"
                      ]
                    }
                  }
                ],
                "_postman_id": "7e114763-c8d2-4cd9-aaac-cb46a6713a84",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/relatedProducts",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","relatedProducts"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice**  Un llamado a `GET /api/Boton/{idBoton}/producto_marca` cumple la misma función.\n\nEste método custom se considera redundante y será removido en futuras versiones."
                },
                "response": []
              },
              {
                "name": "2_2_2_Añadir Productos a un Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5092995-f63e-4172-9677-e7c9a7536a99",
                      "type": "text/javascript",
                      "exec": [
                        "let idBoton = pm.environment.get('idBoton');",
                        "",
                        "",
                        "var schema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"idProducto\": {",
                        "            \"type\": \"integer\"",
                        "        },",
                        "        \"idBoton\": {",
                        "            \"type\": \"string\"",
                        "        }",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.test('schema is valid', () => {",
                        "        let isValid = tv4.validate(jsonData, schema); if (!isValid) {  console.warn(tv4.error); }  pm.expect(isValid).to.be.true;",
                        "    });",
                        "    pm.expect(typeof jsonData === 'object').to.be.true;",
                        "    pm.expect(typeof jsonData.idProducto === 'number').to.be.true;",
                        "    pm.expect(typeof jsonData.idBoton === 'string').to.be.true;",
                        "",
                        "    pm.environment.set('idProducto', jsonData.idProducto)",
                        "    pm.environment.set('idBoton', jsonData.idBoton);",
                        "",
                        "    let cantidadProductos = pm.environment.get('cantidadProductos') || 0;",
                        "    console.log({",
                        "        cantidadProductos",
                        "    });",
                        "    if (cantidadProductos < 2) {",
                        "        postman.setNextRequest('Lista productos de un Botón');",
                        "    }",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74360b87-8f96-4396-8368-ae87fca95381",
                      "type": "text/javascript",
                      "exec": [
                        "if (pm.iterationData.has('productosAgregables')) {",
                        "    let productosAgregables = pm.iterationData.get('productosAgregables'),",
                        "        idProducto = productosAgregables[Math.floor(Math.random() * productosAgregables.length)];",
                        "    pm.environment.set('idProducto', idProducto);",
                        "",
                        "}",
                        "",
                        "pm.variables.set('cantidadProducto', 1 + Math.floor(Math.random() * 3));"
                      ]
                    }
                  }
                ],
                "_postman_id": "f3b05afc-adf7-4a8b-8d55-ada21030a140",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PUT",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"cantidad\":\"{{cantidadProducto}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/productos/rel/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","productos","rel",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      },
                      {
                        "key": "fk",
                        "value": "{{idProducto}}",
                        "type": "string",
                        "description": "id Único de Producto"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_2_3_Elimina Productos de un Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d470e538-d152-48bb-813d-0302dfeb3dc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 204\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "0a56cd0b-6f8c-48b9-95cd-69c466e60938",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/productos/rel/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","productos","rel",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      },
                      {
                        "key": "fk",
                        "value": "{{idProducto}}",
                        "type": "string",
                        "description": "id Único de Producto"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_2_4_Productos que se pueden asociar a un botón",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1e62f6e-afb3-414a-8b94-7a5c27205663",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Status code is 200', function() {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Content-Type is application/json', function() {",
                        "",
                        "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('Schema is valid', function() {",
                        "    let validates = tv4.validate(pm.response.json(), schema);",
                        "    console.log(tv4.error);",
                        "    pm.expect(validates).to.be.true;",
                        "",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json(),",
                        "        isArray = jsonData instanceof Array;",
                        "",
                        "",
                        "    pm.expect(isArray).to.be.true;",
                        "",
                        "    pm.environment.set('idProducto', jsonData[0].id);",
                        "    if (jsonData[1]) {",
                        "        pm.environment.set('idProducto2', jsonData[1].id);",
                        "    }",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "2433a8b1-9000-4ceb-9775-cd1b5133a98f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/producto_marca",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","producto_marca"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  },
                  "description": "Comparando por el campo `idMarca` se obtiene los productos que pueden asociarse a este botpón"
                },
                "response": []
              }
            ],
            "_postman_id": "82febfbd-9aa4-429e-8ec5-63c1738e5acd",
            "_postman_isSubFolder": true
          },
          {
            "name": "2_3_Ventanas_horario",
            "item": [
              {
                "name": "2_3_0_Lista Ventanas Horarias de un Botón.",
                "_postman_id": "1f8987e8-9d75-4669-a3ff-e6b6059511a8",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/ventanas_horario?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","ventanas_horario"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "2_3_1_Elimina Ventanas Horarias de un Botón.",
                "_postman_id": "a13b372d-0578-433f-9526-1e8b488b9427",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/ventanas_horario/rel/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","ventanas_horario","rel",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      },
                      {
                        "key": "fk",
                        "value": "{{idVentana}}",
                        "type": "string",
                        "description": "id Único de Ventana Horaria"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Actualmente existe sólo una ventana horaria. Este endpoint podría ser removido"
                },
                "response": []
              },
              {
                "name": "2_3_2_Añadir Ventanas Horarias de un Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a7c2ead-992d-4dfa-8ee7-1710fddc7edc",
                      "type": "text/javascript",
                      "exec": [
                        "let testsCarpeta=pm.variables.get('testsCarpeta');",
                        "",
                        "",
                        "console.log('============== FIN CARPETA Boton con '+testsCarpeta+' tests ===================');"
                      ]
                    }
                  }
                ],
                "_postman_id": "005ef1e5-173c-4b0c-a1d8-0aa2ef65a80d",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PUT",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/ventanas_horario/rel/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","ventanas_horario","rel",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      },
                      {
                        "key": "fk",
                        "value": "{{idVentana}}",
                        "type": "string",
                        "description": "id Único de Ventana Horaria"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Actualmente existe sólo una ventana horaria. Este endpoint podría ser removido"
                },
                "response": []
              }
            ],
            "_postman_id": "5c33cc83-329a-4c91-a801-a1396a023ede",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08bb9fa3-59a3-4d87-b9cd-04b0f1925fa2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6dc42a58-e60b-46e2-9ab4-26ad16b85a40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          }
        ],
        "_postman_id": "ca148d91-9721-4e4c-92fc-8bdb1f6f0d6b",
        "description": "Los botones de un Cliente",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9fd9d8a-acb1-409c-bc7f-4040f5eb6544",
              "type": "text/javascript",
              "exec": [
                "",
                "",
                "//console.log('bearerToken',pm.variables.get('bearerToken'));",
                "//console.log(\"accessToken\",pm.variables.get('accessToken'));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3671922c-7100-45b6-b195-c2eebb158438",
              "type": "text/javascript",
              "exec": [
                " ",
                "pm.test('Content-Type is application/json', function () {",
                "    ",
                "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                "});",
                "",
                " "
              ]
            }
          }
        ]
      },
      {
        "name": "3_Producto",
        "item": [
          {
            "name": "3_0_Tests Productos: Login",
            "item": [
              {
                "name": "3_0_0_======== Pedidos: Login Antes de Tests ========",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc53677-ea3a-4906-b2b2-1763e9e00fea",
                      "type": "text/javascript",
                      "exec": [
                        "let currentUser = pm.variables.get('currentUser'),",
                        "    clientesObject = pm.variables.get('clientesObject');",
                        "if(typeof clientesObject === 'string') {",
                        "    clientesObject=JSON.parse(clientesObject||\"{}\");",
                        "}",
                        "if(typeof currentUser === 'string') {",
                        "    currentUser=JSON.parse(currentUser||\"{}\");",
                        "}",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "",
                        "    let {",
                        "        userId, user, id: accessToken",
                        "    } = jsonData || {};",
                        "",
                        "    pm.expect(typeof accessToken).to.eql('string');",
                        "    pm.expect(typeof user).to.eql('object');",
                        "",
                        "    pm.expect(typeof userId).to.eql('number');",
                        "    pm.expect(typeof user.email).to.eql('string');",
                        "",
                        "    pm.environment.set('tokenCliente', accessToken);",
                        "    pm.environment.set('bearerToken', btoa(accessToken));",
                        "    pm.environment.set('accessToken', accessToken);",
                        "",
                        "    pm.variables.set('bearerToken', btoa(accessToken));",
                        "    pm.environment.set('accessToken', accessToken);",
                        "",
                        "    pm.environment.set('idCliente', userId);",
                        "    pm.environment.set('currentUserMail', user.email);",
                        "",
                        "",
                        "});",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310cb644-8a62-4d6d-a22c-7f3d0ea7fe63",
                      "type": "text/javascript",
                      "exec": [
                        "var currentUser = pm.variables.get('currentUser');",
                        "",
                        "pm.variables.set('currentUserMail', currentUser.email || pm.environment.get('emailCliente1'));",
                        "pm.variables.set('currentUserPass', currentUser.pass || pm.environment.get('passwordCliente1'));",
                        "",
                        "",
                        "",
                        "pm.variables.set('testsCarpeta', 0);"
                      ]
                    }
                  }
                ],
                "_postman_id": "ae709c83-cf2d-46b7-b8a4-6f46a4780b95",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "noauth"
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"email\":\"{{currentUserMail}}\", \"password\":\"{{currentUserPass}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","login"],
                    "query": [
                      {
                        "description": "incluye datos del usuario en la respuesta",
                        "key": "include",
                        "value": "user"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_0_1_Lista completa de Productos (filtro opcional).",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9555bc4d-e10d-4223-9df7-56c5eb3ab27c",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('Response is JSON and is Array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema); if (!isValid) {  console.warn(tv4.error); }  pm.expect(isValid).to.be.true;",
                        "        ",
                        "        ",
                        "        pm.environment.set('idProducto', jsonData[0].id);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "08f7dd12-c827-42a2-aff7-0ae27e648d93",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_0_2_Lista Productos de tipo Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb1fdc08-eae5-49db-a5c5-8ba0b61a9e12",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('Response is JSON and is Array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "        pm.environment.set('idProductoTipoBoton', jsonData[0].id);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "c6ef4e0f-1fad-4294-9afe-ccea70b32111",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto/botones?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto","botones"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_0_3_Lista Productos de tipo consumible.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d400440-1811-479b-b2bf-f9599f08990f",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('Response is JSON and is Array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "        pm.environment.set('idProducto', jsonData[0].id);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "f7e1c171-c5af-46d0-9693-f0443c73d9f7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto/consumibles?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto","consumibles"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_0_4_Encuentra un Producto por {{id}} en la BBDD.",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91b7aca8-6b2a-4d4a-a5fa-dd1d27bd60eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter','');"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "259936f3-793b-4d23-8ad1-58e4accec986",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "",
                        "    \"$ref\": \"MyDot#/definitions/Producto\"",
                        "",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('Response is JSON and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let isValid = tv4.validate(jsonData, schema); if (!isValid) {  console.warn(tv4.error); }  pm.expect(isValid).to.be.true;",
                        "",
                        "",
                        "        pm.environment.set('idProducto', jsonData.id);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "7845fa98-fbee-4450-924e-78833101c185",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idProducto}}",
                        "type": "string",
                        "description": "id Único de Producto"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "8ffdd237-4bac-44d2-aff5-d0238ac816b6",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c712b243-0d71-4eca-95ad-000caf693178",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e65b5ed-7871-43c0-9066-7b87c66964c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "3_1_Marca",
            "item": [
              {
                "name": "3_1_0_Lista completa de Marcas",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb85451-9ff0-4d00-8166-95dac824dcf1",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "pm.test('Status code is 200', function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "pm.test('Content-Type is application/json', function () {",
                        "    ",
                        "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "});",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function () {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "    let marcas=jsonData.map(marca=>marca.id);",
                        "    ",
                        "    pm.environment.set('marcas',marcas);",
                        "    ",
                        "    let idMarca = marcas.getRandom();",
                        "    pm.expect(idMarca).to.be.a('number');",
                        "    ",
                        "       ",
                        "    pm.environment.set('idMarca',idMarca);",
                        "});",
                        "",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "96162c83-6cd2-45e4-b538-439733d3eb70",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Marca",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Marca"]
                  }
                },
                "response": []
              },
              {
                "name": "3_1_1_Encuentra una Marca por {{id}} en la BBDD.",
                "_postman_id": "78734bf7-b37a-4b5c-85f0-261312e404e6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Marca/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Marca",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idMarca}}",
                        "type": "string",
                        "description": "id Único de Marca"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_1_2_Lista Productos de una Marca.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1cae827-f71a-4293-9664-9d73fcc5d312",
                      "type": "text/javascript",
                      "exec": [
                        "",
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Producto\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    ",
                        "    ",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(jsonData, schema);",
                        "          if (!validates) {",
                        "            console.log(tv4.error);",
                        "        }",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "    });",
                        "    ",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "    let producto = jsonData.pop();",
                        "    pm.expect(typeof producto.id === 'number').to.be.true;",
                        "    ",
                        "       ",
                        "    pm.environment.set('idProducto',producto.id);",
                        "});",
                        "",
                        ""
                      ]
                    }
                  }
                ],
                "_postman_id": "fa84cfe3-9d74-4dd2-885f-a39da3832b49",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Marca/:id/productos?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Marca",":id","productos"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idMarca}}",
                        "type": "string",
                        "description": "id Único de Marca"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_1_3_Muestra la Marca de un Producto.",
                "_postman_id": "e88354ae-b661-42f1-9fca-34858827cea0",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto/:id/marca",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto",":id","marca"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idProducto}}",
                        "type": "string",
                        "description": "id Único de Producto"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "223cb7e6-f3f6-4405-8de6-b774fdbe44ff",
            "description": "READONLY Marcas de producto (pueden ser de un mismo fabricante)",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4de4cb6b-cd01-477c-85fb-c56fbf6d292f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79a3922e-b231-4fb6-bb59-82a022be9686",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "3_2_Categoria",
            "item": [
              {
                "name": "3_2_0_Lista completa de Categorías de Producto (filtro opcional).",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0a29ce5-3fc8-410b-a8cb-cb0a263f18a1",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"type\": \"object\",",
                        "        \"members\": {",
                        "            \"id\": \"number\",",
                        "            \"descripcion\": \"string\"",
                        "",
                        "        }",
                        "    }",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var categorias = pm.response.json();",
                        "    pm.expect(categorias instanceof Array).to.be.true;",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(categorias, schema);",
                        "        if (!validates) {",
                        "            console.log(tv4.error);",
                        "        }",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "    let categoria = categorias[ Math.floor(0.999*Math.random() * categorias.length)];",
                        "    ",
                        "    pm.environment.set('idCategoria', categoria.id);",
                        "    pm.environment.set('categorias', categorias);",
                        "",
                        "",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "4eaf04d0-589d-447f-a0b7-073c71dfbdb7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/ProductoCategoria?",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","ProductoCategoria"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "",
                        "disabled": true
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_2_1_Lista Productos de tipo Botón de una Categoría de Producto.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dec2ff9-9ef2-4789-90a4-25e0d5a663d2",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"items\": {",
                        "        \"type\": \"object\",",
                        "        \"members\": {",
                        "            \"id\": \"number\",",
                        "            \"descripcion\": \"string\",",
                        "            \"ProductoTipoBoton\": \"array\"",
                        "        }",
                        "    }",
                        "};",
                        "",
                        "let idCategoria = pm.environment.get('idCategoria'),",
                        "    categorias = pm.environment.get('categorias');",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pm.response.json(), schema);",
                        "        if (!validates) {",
                        "            console.log(tv4.error);",
                        "        }",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "",
                        "    pm.test('There is a button for the current idCategoria', function() {",
                        "        ",
                        "        let matchingProducto = jsonData.filter(categoria => {",
                        "",
                        "            return categoria.id === idCategoria;",
                        "        });",
                        "        pm.expect(matchingProducto instanceof Array).to.be.true;",
                        "        let {",
                        "            ProductoTipoBoton",
                        "        } = matchingProducto.pop(),",
                        "        productoBoton=ProductoTipoBoton.pop();",
                        "        ",
                        "        console.log(productoBoton);",
                        "",
                        "        pm.expect(productoBoton.id).to.be.a('number');",
                        "",
                        "        pm.environment.set('productoBoton', productoBoton);",
                        "        pm.environment.set('idProductoTipoBoton', productoBoton.id);",
                        "",
                        "    });",
                        "",
                        "",
                        "",
                        "",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "373d9bf2-0ddd-47d6-962d-d9fdda125d47",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/ProductoCategoria/botones?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","ProductoCategoria","botones"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_2_2_Lista Productos de tipo consumible de una Categoría de Producto.",
                "_postman_id": "7e898395-e32d-4b92-a271-dcf7221c3402",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/ProductoCategoria/consumibles?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","ProductoCategoria","consumibles"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_2_3_Encuentra una Categoría de Producto por {{id}} en la BBDD.",
                "_postman_id": "600da12f-2377-4613-b005-24e3d8db5904",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/ProductoCategoria/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","ProductoCategoria",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCategoria}}",
                        "type": "string",
                        "description": "id Único de Categoría de Producto"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "3_2_4_Muestra la Categoria de un Producto.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53d123ed-fba8-41b8-8309-0112ec282d2e",
                      "type": "text/javascript",
                      "exec": [
                        "let testsCarpeta=pm.variables.get('testsCarpeta');",
                        "",
                        "",
                        "console.log('============== FIN CARPETA Producto con '+testsCarpeta+' tests ===================');"
                      ]
                    }
                  }
                ],
                "_postman_id": "b559cdd3-0398-4621-bb18-c78f4a5ec9b6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Producto/:id/categoria",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Producto",":id","categoria"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idProducto}}",
                        "type": "string",
                        "description": "id Único de Producto"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "d05dd3d5-591e-4c23-b139-2287de3e1681",
            "description": "Categorías de producto",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fbe4dadd-e0dd-4f48-bb27-eaf73a9ddfe5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "89012b8f-7c9a-44cd-aca3-7097f16fd05d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test('Content-Type is application/json', function () {",
                    "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});",
                    "",
                    "pm.test('JSON response can be decoded and is an array', function () {",
                    "    var jsonData = pm.response.json(),",
                    "    isArray = jsonData instanceof Array || typeof jsonData === 'object';",
                    "    pm.expect(isArray).to.be.true;",
                    "});",
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          }
        ],
        "_postman_id": "aa50a9e0-6624-4928-a099-3932a3061973",
        "description": "READONLY Los productos disponibles para comprar",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f7a1576-6213-4337-af59-f624e2f64075",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c447ebd-841c-465d-aad5-7f78e7f2239d",
              "type": "text/javascript",
              "exec": [
                "let testsCarpeta=pm.variables.get('testsCarpeta')||0;",
                "pm.variables.set('testsCarpeta',1+1*testsCarpeta);"
              ]
            }
          }
        ]
      },
      {
        "name": "4_Pedido",
        "item": [
          {
            "name": "4_0_Tests Pedidos: Login y lista",
            "item": [
              {
                "name": "4_0_0_Pedidos: Login Antes de Tests",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc53677-ea3a-4906-b2b2-1763e9e00fea",
                      "type": "text/javascript",
                      "exec": [
                        "let currentUser = pm.variables.get('currentUser'),",
                        "    clientesObject = pm.variables.get('clientesObject');",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "",
                        "    let {",
                        "        userId, user, id: accessToken",
                        "    } = jsonData || {};",
                        "",
                        "    pm.expect(typeof accessToken).to.eql('string');",
                        "    pm.expect(typeof user).to.eql('object');",
                        "",
                        "    pm.expect(typeof userId).to.eql('number');",
                        "    pm.expect(typeof user.email).to.eql('string');",
                        "",
                        "    pm.environment.set('tokenCliente', accessToken);",
                        "    pm.environment.set('bearerToken', btoa(accessToken));",
                        "    pm.environment.set('accessToken', accessToken);",
                        "",
                        "    pm.variables.set('bearerToken', btoa(accessToken));",
                        "    pm.environment.set('accessToken', accessToken);",
                        "",
                        "    pm.environment.set('idCliente', userId);",
                        "    pm.environment.set('currentUserMail', user.email);",
                        "",
                        "});",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310cb644-8a62-4d6d-a22c-7f3d0ea7fe63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('testsCarpeta', 0);",
                        "var currentUser = pm.variables.get('currentUser');",
                        "",
                        "pm.variables.set('currentUserMail', currentUser.email || pm.environment.get('emailCliente1'));",
                        "pm.variables.set('currentUserPass', currentUser.pass || pm.environment.get('passwordCliente1'));"
                      ]
                    }
                  }
                ],
                "_postman_id": "78803dca-ca2a-4ea1-96ac-88336f98659b",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "auth": {
                    "type": "noauth"
                  },
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"email\":\"{{emailCliente1}}\", \"password\":\"{{passwordCliente1}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","login"],
                    "query": [
                      {
                        "description": "incluye datos del usuario en la respuesta",
                        "key": "include",
                        "value": "user"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "a47851a4-e3aa-4e17-af2e-cf5f9e414c29",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c712b243-0d71-4eca-95ad-000caf693178",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e65b5ed-7871-43c0-9066-7b87c66964c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "4_1_Cliente/{id}/pedido - pedidos por cliente",
            "item": [
              {
                "name": "4_1_0_Agrega una entidad pedidos a un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "438722e8-145e-4a72-a212-b694749ee212",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "        }",
                        "    },",
                        "    pedidoSchema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    };",
                        "",
                        "pm.test('Schema is valid', function() {",
                        "    let {productos,mediopago,transaccion,authorizationCode,...pedido}=pm.response.json(),",
                        "     validates = tv4.validate(pedido, pedidoSchema);",
                        "    if (!validates) {",
                        "        console.log(tv4.error);",
                        "    }",
                        "    pm.expect(validates).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test('Status code is 200', function() {",
                        "    pm.response.to.have.status(200);",
                        "",
                        "",
                        "    pm.test('Content-Type is application/json', function() {",
                        "",
                        "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                        "",
                        "",
                        "        pm.test('JSON response can be decoded', function() {",
                        "            var jsonData = pm.response.json(),",
                        "                isNumber = typeof jsonData.id === 'number';",
                        "",
                        "            pm.expect(isNumber).to.be.true;",
                        "            pm.environment.set('idPedido', jsonData.id);",
                        "        });",
                        "",
                        "",
                        "    });",
                        "",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "ab9002ad-ab60-4cc0-b06b-e01e712b557f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    },
                    {
                      "key": "",
                      "value": "{{idMe",
                      "disabled": true
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n\n  \"idProducto\":{{idProductoTipoBoton}},\n  \"idMediopago\":\"{{idMediopago}}\"\n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/pedidos",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","pedidos"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_1_1_Lista pedidos de un Cliente.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e83d173-bb84-4435-8c4d-efb9a568cdf4",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "        }",
                        "    },",
                        "    pedidoSchema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    };",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function() {",
                        "    var jsonData = pm.response.json(),",
                        "        isArray = jsonData instanceof Array;",
                        "    pm.expect(isArray).to.be.true;",
                        "",
                        " ",
                        "    let pedidosVigentes = jsonData.filter(pedido => {",
                        "         return pedido.idDireccion !== null && pedido.idMediopago !== null && pedido.estado.soloEstadoFinal === 0;",
                        "    }).map(pedido => {",
                        "        let {",
                        "            estado, ...cleanPedido",
                        "        } = pedido;",
                        "        return cleanPedido;",
                        "    });",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pedidosVigentes, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "",
                        "    pm.test('Latest pedido is valid', function() {",
                        "",
                        "        let pedido = pedidosVigentes[0];",
                        "        console.log({pedidosVigentes, pedido});",
                        "        let validates = tv4.validate(pedido, pedidoSchema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "",
                        "",
                        "        pm.environment.set('idPedido', pedido.id);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "43a57c5c-9e81-4cfa-b115-cb6174ec38ce",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/pedidos?filter={\"include\":[\"estado\"]}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","pedidos"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{\"include\":[\"estado\"]}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_1_2_Buscar pedido por id",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16dc05e8-a8a8-43e0-97bd-596112a6c94b",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "    ",
                        "    let {boton,cliente,estado,direccion,mediopago,transaccion,productos,costo,...pedido}=jsonData;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pedido, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "",
                        "    pm.test('pedido.transaccion is a number', function() {",
                        "",
                        "",
                        "        let {",
                        "            id: transactionId,",
                        "            idProducto,",
                        "            idMediopago,",
                        "            idDireccion,",
                        "            estado,",
                        "            direccion,",
                        "            mediopago,",
                        "            transaccion,",
                        "            productos",
                        "        } = jsonData;",
                        "        pm.expect( transactionId).to.be.a('number');",
                        "",
                        "",
                        "        pm.environment.set('idTransaccion', transactionId);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "0686c317-250d-41e7-823b-f3d19f4fc1e6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/pedidos/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","pedidos",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedidos"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_1_3_Cancela pedido de un cliente",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbbd789e-1a7e-41ff-a276-e8fdf39a8395",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('JSON response has pedido and transaccion', function() {",
                        "    var jsonData = pm.response.json(),",
                        "        isObject = typeof jsonData === 'object';",
                        "",
                        "    pm.expect(isObject).to.be.true;",
                        "    let {",
                        "        pedido, transaccion",
                        "    } = jsonData;",
                        "",
                        "    pm.expect(typeof pedido).to.eq('object');",
                        "    pm.expect(typeof transaccion).to.eq('object');",
                        "    pm.expect(transaccion.status).to.eq('Anulada');",
                        "",
                        "    pm.environment.set('idPedidoFinalizado', pedido.id);",
                        "",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "b8950333-ef71-4de3-abb2-aa1fddb3ee43",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "DELETE",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/:id/pedidos/:fk",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente",":id","pedidos",":fk"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idCliente}}",
                        "type": "string",
                        "description": "id Único de Cliente"
                      },
                      {
                        "key": "fk",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedidos"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "9b0b7965-9ab3-4cdc-9084-5ab4169154b9",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15360cd6-2ea5-4d0f-b454-a4ada49a24bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91fd1c56-2cdf-4597-88f3-ef5dc169942a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "4_2_Boton/{id}/pedido - pedidos por botón",
            "item": [
              {
                "name": "4_2_0_Lista de botones del cliente",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92578aae-f97d-4e00-91be-deea5f99c466",
                      "type": "text/javascript",
                      "exec": [
                        "var botones;",
                        "pm.variables.set('filter','');",
                        "",
                        "",
                        "pm.test('JSON response can be decoded', function() {",
                        "    let jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    pm.expect(jsonData.length > 0).to.be.true;",
                        "",
                        "    var schema = {",
                        "        \"type\": \"array\",",
                        "        \"items\": {",
                        "            \"$ref\": \"MyDot#/definitions/Boton\"",
                        "        }",
                        "    };",
                        "    botones = jsonData.map(boton => {",
                        "        let {",
                        "            productos, ...cleanBoton",
                        "        } = boton;",
                        "        return cleanBoton;",
                        "    });",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "",
                        "",
                        "        let isValid = tv4.validate(botones, schema);",
                        "        if (!isValid) {",
                        "            console.warn(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "",
                        "    let botonesHabilitados = jsonData.filter(boton => {",
                        "        console.log(boton.otrocampo);",
                        "        return boton.productos && boton.productos.length > 0 &&",
                        "            boton.idMarca !== null &&",
                        "            boton.idMediopago !== null &&",
                        "            boton.idDireccion !== null;",
                        "    }).map(boton => boton.id);",
                        "",
                        "    let idBoton = botonesHabilitados[Math.floor(botonesHabilitados.length * (Math.random() * 0.999))];",
                        "    console.log({",
                        "        botonesHabilitados, idBoton",
                        "    });",
                        "    if (typeof idBoton === 'string') {",
                        "        pm.environment.set('idBoton', idBoton);",
                        "        pm.environment.set('botones', botonesHabilitados);",
                        "",
                        "        pm.iterationData.syncVariablesTo('cliente_botones', {",
                        "            botones",
                        "        });",
                        "        console.log(botones);",
                        "    }",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "6904eb25-990e-48db-95ab-5d66b1c57a59",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton?filter={\"include\":[\"productos\"]}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton"],
                    "query": [
                      {
                        "key": "filter",
                        "value": "{\"include\":[\"productos\"]}"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_2_1_Lista pedidos de un Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea4f1403-ecb9-4af3-972c-c0724292036a",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let pedidosVigentes = jsonData.filter(pedido => {",
                        "            return ",
                        "            pedido.idMediopago!==null &&",
                        "            pedido.idDireccion!==null &&",
                        "            pedido.estado && pedido.estado.soloEstadoFinal === 0;",
                        "        }).map(pedido => {",
                        "            let {",
                        "                estado, ...cleanPedido",
                        "            } = pedido;",
                        "            return cleanPedido;",
                        "        });",
                        "        let isValid = tv4.validate(pedidosVigentes, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(isValid).to.be.true;",
                        "        if (pedidosVigentes.length) {",
                        "            let pedido = pedidosVigentes[0];",
                        "",
                        "            pm.expect(typeof pedido.id).to.eq('number');",
                        "            pm.environment.set('idPedido', pedido.id);",
                        "        }",
                        "    });",
                        "",
                        "});",
                        "pm.variables.set('filter','');"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed6ccff3-e0d3-4f93-b0a6-1cf23f576696",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter','{\"where\":{\"idEstado\":{\"neq\":null}}, \"limit\":20, \"include\":[\"estado\"]}');"
                      ]
                    }
                  }
                ],
                "_postman_id": "2947f0ec-aba7-4e64-9230-43ecf0562e27",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/pedidos?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","pedidos"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_2_2_Agrega una entidad pedidos a un Botón.",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1133b47e-55c1-4cb5-8a5c-4ab80e505c13",
                      "type": "text/javascript",
                      "exec": [
                        "var descuento = pm.variables.get('descuento'),",
                        "    schema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    },",
                        "    idBoton=pm.environment.get('idBoton'),",
                        "    requestVars=pm.request.body.raw,",
                        "    requestBody=requestVars && JSON.parse(requestVars);",
                        "    ",
                        "    console.log(requestBody);",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "    let {",
                        "        boton, cliente, estado, direccion, mediopago, transaccion, productos,estos_valores,precio, costo, ...pedido",
                        "    } = jsonData;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pedido, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "    ",
                        "    pm.test('descuento cannot be altered', () => {",
                        "        pm.expect(pedido.descuento).not.to.eq(requestBody.descuento);",
                        "    });",
                        "    pm.test('descuento_primer_pedido cannot be altered', () => {",
                        "        pm.expect(pedido.descuento_primer_pedido).not.to.eq(requestBody.descuento_primer_pedido);",
                        "    });",
                        "    pm.test('precioNeto cannot be altered', () => {",
                        "        pm.expect(pedido.precioNeto).not.to.eq(requestBody.precioNeto);",
                        "    });",
                        "    pm.test('boton matches request', () => {",
                        "        pm.expect(pedido.idBoton).to.eq(idBoton);",
                        "    });",
                        "    pm.test('pedido.id is a number', () => {",
                        "        pm.expect(pedido.id).to.be.a('number');",
                        "        pm.environment.set('idPedido',pedido.id);",
                        "    });",
                        "    ",
                        "    pm.test('pedido.transaccion is a number', function() {",
                        "",
                        "",
                        "        let {",
                        "            id: transactionId,",
                        "            idProducto,",
                        "            idMediopago,",
                        "            idDireccion,",
                        "            estado,",
                        "            direccion,",
                        "            mediopago,",
                        "            transaccion,",
                        "            productos",
                        "        } = jsonData;",
                        "        pm.expect(transactionId).to.be.a('number');",
                        "",
                        "",
                        "        pm.environment.set('idTransaccion', transactionId);",
                        "    });",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a43a9634-eeee-4589-a276-6ef3f329d1bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError','any')",
                        "pm.variables.set('expectHeaders',[200,204,301,302,400,401,409,422]);",
                        "pm.variables.set('descuento',parseInt(1000+10000*Math.random(),10));",
                        "let precio=parseInt(5000+10000*Math.random(),10)",
                        "pm.variables.set('precio',precio);",
                        "pm.variables.set('precioTotal',3*precio);"
                      ]
                    }
                  }
                ],
                "_postman_id": "73a73f33-fce2-4d5d-866b-9f0f3678a630",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"descuento\":{{descuento}},\n\"precioNeto\":{{precio}},\n\"precioTotal\":{{precioTotal}},\n\"descuento_primer_pedido\":1, \n\"estos_valores\":\"se sanitizan\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Boton/:id/pedidos",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Boton",":id","pedidos"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idBoton}}",
                        "type": "string",
                        "description": "id Único de Botón"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_2_3_Modifica un pedido por {id}",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9c2e74-ecea-4c53-bbf1-c0316d3429c5",
                      "exec": [
                        "let idEstado=pm.environment.get('estadoPedido')*1||2;",
                        "if(idEstado>2) {",
                        "    pm.variables.set('idEstado',idEstado-1);",
                        "} else {",
                        "    pm.variables.set('idEstado',idEstado+1);",
                        "}"
                      ],
                      "type": "text/javascript"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "658b67ff-956b-4169-b0e9-41e35632a6a1",
                      "exec": [
                        "",
                        "",
                        "",
                        "let idEstado = pm.variables.get('idEstado');",
                        "",
                        "var descuento = pm.variables.get('descuento'),",
                        "    schema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    },",
                        "    idBoton = pm.environment.get('idBoton');",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "",
                        "    let {",
                        "        boton, cliente, estado, direccion, mediopago, transaccion, productos, estos_valores, precio, costo, ...pedido",
                        "    } = jsonData;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pedido, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "    pm.test('idEstado matches request', () => {",
                        "        pm.expect(1*jsonData.idEstado).to.eq(1*idEstado);",
                        "",
                        "        pm.environment.set('estadoPedido', jsonData.idEstado);",
                        "    });",
                        "});",
                        "",
                        "",
                        "",
                        ""
                      ],
                      "type": "text/javascript"
                    }
                  }
                ],
                "_postman_id": "0f29263f-d809-42e6-a78e-35b2240ca0b6",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"idEstado\":\"{{idEstado}}\"}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "8041c03c-71ba-4c87-bc90-c558a07508e5",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a3a5560-b21d-4ed1-82e4-a5b1f2cee726",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4fa53b95-6ddb-4fcf-9dcc-a7dbcddd9219",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "4_3_Request utilitarios a un pedido",
            "item": [
              {
                "name": "4_3_0_Lista completa de Ventanas Horarias (filtro opcional).",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0a3bb84-f85f-4f4b-aae2-fbdb310e44f2",
                      "type": "text/javascript",
                      "exec": [
                        "let readOrParse=pm.variables.get('readOrParse') ;",
                        "console.log({readOrParse});",
                        "    pm.test('JSON response can be decoded and is an array', function() {",
                        "        var jsonData = pm.response.json();",
                        "        pm.expect(jsonData instanceof Array).to.be.true;",
                        "",
                        "        if (jsonData.length) {",
                        "            let idVentana = jsonData[0];",
                        "",
                        "            pm.expect(typeof idVentana.id).to.eq('number');",
                        "            pm.environment.set('idProducto', idVentana.id);",
                        "        }",
                        "    });",
                        "//postman.setNextRequest('Envía un mensaje cualquiera al API');"
                      ]
                    }
                  }
                ],
                "_postman_id": "40570058-9db4-4c76-b07a-6bb435b991cc",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/VentanaHoraria?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","VentanaHoraria"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  },
                  "description": "**Deprecation notice**\n\nHasta la versión v0.21.0 listaba Franjas horarias de despacho (8:00 a 22:00) y entrega inmediata\n\nDesde la versión v0.22.0 en adelante, sólo existe la ventana express, por lo que este endpoint deja de tener sentido y podría ser removido en un futuro próximo"
                },
                "response": []
              },
              {
                "name": "4_3_1_Lista ventanas horarias con el costo de despacho para una dirección específica",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c118cb28-819a-40c5-b32f-ca303c6b8478",
                      "type": "text/javascript",
                      "exec": [
                        "let direccionObj = pm.environment.get('direccionObj');",
                        "",
                        "if (!direccionObj.id) {",
                        "    direccionObj.id = direccionObj.direcciones.getRandom();",
                        "",
                        "    pm.environment.set('direccionObj', direccionObj)",
                        "",
                        "}",
                        "pm.variables.set('direccionObj.id', direccionObj.id);"
                      ]
                    }
                  }
                ],
                "_postman_id": "0e772114-ab40-463d-9972-c219f8dd1a5a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Cliente/ventanasDireccion/:idDireccion",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Cliente","ventanasDireccion",":idDireccion"],
                    "variable": [
                      {
                        "key": "idDireccion",
                        "value": "{{direccionObj.id}}",
                        "type": "string",
                        "description": "id Único de dirección"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Sólo la ventana horaria de despacho express está disponible. \n\nEste endpoint ha sido descontinuado y puede ser removido en futuras versiones\n\nLa lista de direcciones `GET /api/Cliente/{idCliente}/direcciones` ahora incluye el costo de despacho"
                },
                "response": []
              },
              {
                "name": "4_3_2_Costo despacho dado monto de un pedido",
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb3b17e-ccc9-47ad-ae62-d11fbb8eb6b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('JSON response can be decoded and is an array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(typeof jsonData).to.eq('object');",
                        "    pm.expect(typeof jsonData.montoDespachoGratis).to.eq('number');",
                        "",
                        "});"
                      ]
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "735f49e3-a087-4689-a1f9-4e6ace30a10d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('monto',10000);"
                      ]
                    }
                  }
                ],
                "_postman_id": "8e41d0d8-21e4-40ac-b62d-8cfcef65ccab",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/costo_despacho/:monto",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido","costo_despacho",":monto"],
                    "variable": [
                      {
                        "key": "monto",
                        "value": "{{monto}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "0d52bc37-7dbf-4644-8c6e-e37133f2ede9",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b90a19d9-5c56-4263-bdbe-c4d837192d6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3eb4ea2-804a-4a9e-869e-2403fe39186e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test('Content-Type is application/json', function () {",
                    "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});",
                    "",
                    "pm.test('JSON response can be decoded and is an array', function () {",
                    "    var jsonData = pm.response.json(),",
                    "    isArray = jsonData instanceof Array || typeof jsonData === 'object';",
                    "    pm.expect(isArray).to.be.true;",
                    "});",
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "4_4_Entidades relacionadas",
            "item": [
              {
                "name": "4_4_0_Lista completa de Pedidos (propios) (filtro opcional).",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "604b4bb0-f621-4118-82ce-28c68264f1c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('filter','{\"where\":{\"idEstado\":{\"neq\":null}}, \"limit\":20, \"include\":[\"productos\",\"estado\",\"transaccion\"]}');"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1202a0a3-9f0d-4249-8cb2-aa3903d7e429",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"type\": \"array\",",
                        "    \"items\": {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "    }",
                        "",
                        "};",
                        "",
                        "pm.variables.set('filter','');",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an array', function() {",
                        "    var jsonData = pm.response.json();",
                        "    pm.expect(jsonData instanceof Array).to.be.true;",
                        "    let pedidosVigentesFechaAnterior = jsonData.filter(pedido => {",
                        "            return pedido.estado.estadoCancelado === 0 && pedido.estado.soloEstadoFinal === 0",
                        "                //&& pedido.createdAt.split('T')[0] < new Date().toISOString().split('T')[0] ",
                        "                && (pedido.transaccion.responseCode===0 || pedido.transaccion.responseCode===null)",
                        "                && pedido.transaccion.authorizationCode !== null;",
                        "",
                        "        }),",
                        "        pedidosVigentes = jsonData.filter(pedido => {",
                        "            return pedido.idDireccion !== null &&",
                        "                pedido.idMediopago !== null &&",
                        "                pedido.estado.estadoCancelado === 0 &&",
                        "                pedido.estado.soloEstadoFinal === 0;",
                        "        }).map(pedido => {",
                        "            let {",
                        "                estado, productos, transaccion, ...cleanPedido",
                        "            } = pedido;",
                        "            return cleanPedido;",
                        "        }),",
                        "",
                        "        pedidosFinalizados = jsonData.filter(pedido => {",
                        "            return pedido.idDireccion !== null &&",
                        "                pedido.idMediopago !== null &&",
                        "                pedido.estado.soloEstadoFinal === 1;",
                        "        }).map(pedido => {",
                        "            let {",
                        "                estado, productos, transaccion, ...cleanPedido",
                        "            } = pedido;",
                        "            return cleanPedido;",
                        "        });",
                        "",
                        "    pm.test('Schema is valid for pedidosVigentes', function() {",
                        "        let isValid = tv4.validate(pedidosVigentes, schema);",
                        "        if (!isValid) {",
                        "            console.log(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "        if (pedidosVigentes.length) {",
                        "            let pedido = pedidosVigentes[0];",
                        "",
                        "            pm.expect(typeof pedido.id).to.eq('number');",
                        "            pm.environment.set('idPedido', pedido.id);",
                        "        }",
                        "        if (pedidosVigentesFechaAnterior.length) {",
                        "            pm.environment.set('idPedidoVigenteFechaAnterior', pedidosVigentesFechaAnterior.pop().id);",
                        "        }",
                        "    });",
                        "",
                        "",
                        "    pm.test('Schema is valid for pedidosFinalizados', function() {",
                        "        let isValid = tv4.validate(pedidosFinalizados, schema);",
                        "        if (!isValid) {",
                        "            console.log(tv4.error);",
                        "        }",
                        "        pm.expect(isValid).to.be.true;",
                        "",
                        "    });",
                        "    if (pedidosFinalizados.length) {",
                        "        let pedidoFinalizado = pedidosFinalizados[0];",
                        "",
                        "        pm.expect(typeof pedidoFinalizado.id).to.eq('number');",
                        "        pm.environment.set('idPedidoFinalizado', pedidoFinalizado.id);",
                        "    }",
                        "",
                        "    if (pedidosVigentes.length) {",
                        "        let pedido = pedidosVigentes[0];",
                        "",
                        "        pm.expect(typeof pedido.id).to.eq('number');",
                        "        pm.environment.set('idPedido', pedido.id);",
                        "    }",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "6294f2f5-cd79-4dda-b3ae-4677a0adbb68",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ]
                  },
                  "description": "Para obtener las entidades anidadas, se puede usar:\n```\nGET https://apidev.mydot.app/api/Pedido?filter={\"include\":[\"productos\",\"direccion\",\"mediopago\"]}\n```"
                },
                "response": []
              },
              {
                "name": "4_4_1_Resumen con todos los datos de un pedido",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c909aeda-ff97-4d25-bd30-2cc09bcf1beb",
                      "type": "text/javascript",
                      "exec": [
                        "//pm.variables.set('idPedido',548);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec92db8-bb84-412f-91e1-e99fe1d42720",
                      "type": "text/javascript",
                      "exec": [
                        "var schema = {",
                        "    \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "};",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "    ",
                        "    let {boton,cliente,estado,direccion,mediopago,transaccion,productos,costo,...pedido}=jsonData;",
                        "",
                        "    pm.test('Schema is valid', function() {",
                        "        let validates = tv4.validate(pedido, schema);",
                        "        console.log(tv4.error);",
                        "        pm.expect(validates).to.be.true;",
                        "    });",
                        "",
                        "    pm.test('pedido.transaccion is a number', function() {",
                        "",
                        "",
                        "        let {",
                        "            id: transactionId,",
                        "            idProducto,",
                        "            idMediopago,",
                        "            idDireccion,",
                        "            estado,",
                        "            direccion,",
                        "            mediopago,",
                        "            transaccion,",
                        "            productos",
                        "        } = jsonData;",
                        "        pm.expect( transactionId).to.be.a('number');",
                        "",
                        "",
                        "        pm.environment.set('idTransaccion', transactionId);",
                        "    });",
                        "});"
                      ]
                    }
                  }
                ],
                "_postman_id": "ffc3f04f-c23f-4e56-9a68-73cec237ccbf",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}",
                      "disabled": true
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id/resumen",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id","resumen"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_2_Encuentra un Pedido por {{id}} en la BBDD",
                "_postman_id": "4e99a0f8-a796-4f70-8227-b1d1c0a94ca7",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id?filter={\"include\":[\"transaccion\", \"productos\",\"estado\"]}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{\"include\":[\"transaccion\", \"productos\",\"estado\"]}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_3_Muestra transacción asociada a un pedido",
                "_postman_id": "87a6f083-2115-4c61-b490-8610946ded9a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id/transaccion",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id","transaccion"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_4_Muestra la Dirección asociada a un Pedido.",
                "_postman_id": "c0de4401-df6d-437f-8919-0db591c69550",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id/direccion",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id","direccion"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_5_Muestra el Medio de Pago asociado a un Pedido.",
                "_postman_id": "66c2659f-b5bc-4f0e-8e5c-cdaa37af0f7c",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id/mediopago",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id","mediopago"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_6_Muestra el Estado Actual de un Pedido.",
                "_postman_id": "cfe5b9fa-7a6c-4ff2-aff4-9f1320427fff",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id/estado",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id","estado"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedido}}",
                        "type": "string",
                        "description": "id Único de Pedido"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_7_Intenta Modificar un pedido finalizado",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9c2e74-ecea-4c53-bbf1-c0316d3429c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 400, 401, 403, 409]);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "658b67ff-956b-4169-b0e9-41e35632a6a1",
                      "type": "text/javascript",
                      "exec": [
                        "let idEstado = pm.variables.get('idEstado');",
                        "",
                        "var descuento = pm.variables.get('descuento'),",
                        "    schema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    },",
                        "    idBoton = pm.environment.get('idBoton');",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "    ",
                        "    pm.expect(jsonData.status).to.eq(409);",
                        "",
                        "});",
                        "let testsCarpeta=pm.variables.get('testsCarpeta');",
                        "",
                        "console.log('============== FIN CARPETA Pedido con '+testsCarpeta+' tests ===================');"
                      ]
                    }
                  }
                ],
                "_postman_id": "078f8097-f136-4be5-aa3c-68ca4b71ec41",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"idEstado\":1}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedidoFinalizado}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              },
              {
                "name": "4_4_8_Intenta Anular un pedido vigente de una fecha anterior",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9c2e74-ecea-4c53-bbf1-c0316d3429c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set('expectError', 'any');",
                        "pm.variables.set('expectHeaders', [200, 400, 401, 403, 409]);"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "658b67ff-956b-4169-b0e9-41e35632a6a1",
                      "type": "text/javascript",
                      "exec": [
                        "let idEstado = pm.variables.get('idEstado');",
                        "",
                        "var descuento = pm.variables.get('descuento'),",
                        "    schema = {",
                        "        \"$ref\": \"MyDot#/definitions/Pedido\"",
                        "",
                        "    },",
                        "    idBoton = pm.environment.get('idBoton');",
                        "",
                        "",
                        "",
                        "",
                        "pm.test('JSON response can be decoded and is an object', function() {",
                        "    var jsonData = pm.response.json();",
                        "",
                        "    pm.expect(jsonData).to.be.a('object');",
                        "    ",
                        "",
                        "",
                        "",
                        "});",
                        "pm.test(\"Successful POST request\", function () {",
                        "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 409]);",
                        "});",
                        "let testsCarpeta=pm.variables.get('testsCarpeta');",
                        "",
                        "console.log('============== FIN CARPETA Pedido con '+testsCarpeta+' tests ===================');"
                      ]
                    }
                  }
                ],
                "_postman_id": "8557d1bb-f5ff-4e2e-8ccc-5fe36cb5e6c0",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "PATCH",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"idEstado\":7,\"nullify\":true}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/api/Pedido/:id",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","Pedido",":id"],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idPedidoVigenteFechaAnterior}}",
                        "type": "string"
                      }
                    ]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "8992b6a2-07a9-4ac1-ad04-ecd408954950",
            "_postman_isSubFolder": true
          }
        ],
        "_postman_id": "50bd2ae2-15c6-474a-9fc3-74176bee9c59",
        "description": "Un pedido generado a través de un botón o de la App",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7567fd2d-ca40-416e-83f3-af351d5e0c1a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d333f18-58a7-4935-8d3b-9fcf30700c1b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "5_Misc",
        "item": [
          {
            "name": "5_0_Endpoint para probar alertas de errores",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ea72e420-3a71-498c-a3b7-30f94838e947",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "604e86be-6225-4456-8c16-83219e2cae91",
                  "type": "text/javascript",
                  "exec": [
                    "let index=Math.floor(Math.random(5)),",
                    "header=[200,400,409,422,500][index];",
                    "pm.variables.set('expectHeaders',[header]);",
                    "pm.variables.set('expectHeader',header);",
                    "pm.variables.set('expectError','any');"
                  ]
                }
              }
            ],
            "_postman_id": "c44778c7-4cfd-4183-9955-7a6b5aa39149",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"mensaje\":\"alerta\",\n    \"problema\": \"sonamos\",\n    \"donde\": \"Agustín del Castillo 2245\",\n    \"statusCode\":\"{{expectHeader}}\"\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Misc/throwError",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","throwError"]
              },
              "description": "Verifica si una direccion tiene cobertura"
            },
            "response": []
          },
          {
            "name": "5_1_Verifica si una direccion tiene cobertura",
            "_postman_id": "a1e7ce6b-90fc-4fd9-bea8-d60d4fd88458",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n        \"lng\": -70.5688699,\n        \"lat\": -33.4090248\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Misc/hasCobertura",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","hasCobertura"]
              },
              "description": "Verifica si una direccion tiene cobertura"
            },
            "response": []
          },
          {
            "name": "5_2_Devuelve términos de servicio como objeto JSON",
            "_postman_id": "67da3986-6b61-4519-bef2-a4c61b73583f",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/tos",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","tos"]
              }
            },
            "response": []
          },
          {
            "name": "5_3_Devuelve términos de servicio como HTML",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d14d0ecd-979c-4220-8589-3818c5a75b68",
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.set('expectError','any');"
                  ]
                }
              }
            ],
            "_postman_id": "73d8d91c-78eb-4b45-b3f7-48b58cc71bb4",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/terminos_de_servicio",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","terminos_de_servicio"]
              }
            },
            "response": []
          },
          {
            "name": "5_4_Devuelve política de privacidad como objeto JSON",
            "_postman_id": "97ba77e3-5334-4c53-8369-60f6cf566217",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/privacidad",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","privacidad"]
              }
            },
            "response": []
          },
          {
            "name": "5_5_Devuelve política de privacidad como HTML",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01f665f0-c887-404e-84c7-55cd94c55ff3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.set('expectError','any');"
                  ]
                }
              }
            ],
            "_postman_id": "21705aaa-c955-450e-9cdd-f67ad0ce9037",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/privacy",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","privacy"]
              }
            },
            "response": []
          },
          {
            "name": "5_6_Devuelve preguntas frecuentes como objeto JSON",
            "_postman_id": "ac2f0b82-f4cb-477d-bfbd-33d5b2cb4a63",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/faq",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","faq"]
              }
            },
            "response": []
          },
          {
            "name": "5_7_Devuelve preguntas frecuentes como HTML",
            "_postman_id": "80a2233d-5a86-44c5-b8ae-ce8c20fb9e3f",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/preguntas_frecuentes",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","preguntas_frecuentes"]
              }
            },
            "response": []
          },
          {
            "name": "5_8_Devuelve url de un banner para mostrar al cliente",
            "_postman_id": "84988685-cb1e-4deb-ad05-b5ab2a358313",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/banner",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","banner"]
              }
            },
            "response": []
          },
          {
            "name": "5_9_Listado de banners por posición y tamaño",
            "_postman_id": "f0ecdad8-8d6e-4987-8d35-3626c8817762",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/banners",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","banners"]
              }
            },
            "response": []
          },
          {
            "name": "5_10_Devuelve el polígono de cobertura como pares de coordenadas",
            "_postman_id": "7ea4f59f-b9be-43f2-bb34-c85377fecf41",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/cobertura",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","cobertura"]
              },
              "description": "Devuelve el polígono de cobertura como pares de coordenadas"
            },
            "response": []
          },
          {
            "name": "5_11_Devuelve el polígono de cobertura como FeatureCollection",
            "_postman_id": "5a61d900-311d-4e97-873a-2a76d2ee6e45",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/coberturaFC",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","coberturaFC"]
              },
              "description": "Devuelve el polígono de cobertura como GeoJSON"
            },
            "response": []
          },
          {
            "name": "5_12_Devuelve el polígono de cobertura como GeoJSON",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "607e01ef-ffdd-46fe-9c14-5842d424ebce",
                  "type": "text/javascript",
                  "exec": [
                    "//postman.setNextRequest('Envía un mensaje cualquiera al API');",
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "afc6c90d-2657-4adc-874f-5d838079f17f",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Misc/coberturaGeoJson",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","coberturaGeoJson"]
              },
              "description": "Devuelve el polígono de cobertura como GeoJSON"
            },
            "response": []
          }
        ],
        "_postman_id": "1eab0b19-0406-4718-a0ca-ed61c1de8827",
        "description": "Endpoints no relacionados a un modelo",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a21bae9-28dc-4d5b-9ede-8ea8d7c8ff91",
              "type": "text/javascript",
              "exec": [
                "pm.variables.set('expectError','any');"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a148f3e8-7238-49f6-9085-5fb2b6b90971",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "8_Aux_Restore_Entiries",
        "item": [
          {
            "name": "8_0_Request previo a tests",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84889344-ef85-49c5-a71c-c04d87fc9e3e",
                  "type": "text/javascript",
                  "exec": [
                    "let ambiente_iterationData = pm.iterationData.get('ambiente'),",
                    "    test_url_iterationData = pm.iterationData.get('api_test_url');",
                    "",
                    "pm.iterationData.set('idCliente',pm.environment.get('idCliente'));",
                    "",
                    "console.log(pm.iterationData.toObject());"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "62e14122-af1a-439b-90e1-dbe01449b011",
                  "type": "text/javascript",
                  "exec": [
                    "    let cuando_iterationData = pm.iterationData.get('cuando');",
                    "    ",
                    "",
                    "",
                    "//console.log({    'iterationData: cuando': cuando_iterationData });"
                  ]
                }
              }
            ],
            "_postman_id": "f773db21-561b-4580-ad71-41484547a1f3",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"api_test_url_collection\": \"{{api_test_url_collection}}\",\n    \"api_test_url_vars\":\"{{api_test_url_vars}}\",\n    \"currentUser\":{{currentUser}},\n    \"lat\": -33.4249376,\n    \"clientesObj\":{{clientesObject}}\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "https://postman-echo.com/post?ambiente={{ambiente}}&api_test_url={{api_test_url}}&id_cliente={{idCliente}}",
                "protocol": "https",
                "host": ["postman-echo","com"],
                "path": ["post"],
                "query": [
                  {
                    "key": "ambiente",
                    "value": "{{ambiente}}"
                  },
                  {
                    "key": "api_test_url",
                    "value": "{{api_test_url}}"
                  },
                  {
                    "key": "id_cliente",
                    "value": "{{idCliente}}"
                  }
                ]
              },
              "description": "Sirve para fijar variables"
            },
            "response": []
          }
        ],
        "_postman_id": "aba53e89-27b2-42c8-964e-93047a204780",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eee55a95-848c-4187-a973-43b6156da15a",
              "type": "text/javascript",
              "exec": [
                "let Boton = pm.environment.get('definition.Boton'),",
                "    Cliente = pm.environment.get('definition.Cliente'),",
                "    Direccion = pm.environment.get('definition.Direccion'),",
                "    Marca = pm.environment.get('definition.Marca'),",
                "    MedioPago = pm.environment.get('definition.MedioPago'),",
                "    Producto = pm.environment.get('definition.Producto'),",
                "    NotificationToken = pm.environment.get('definition.NotificationToken'),",
                "    Pedido = pm.environment.get('definition.Pedido'),",
                "    definitions = {",
                "        Boton,",
                "        Cliente,",
                "        Direccion,",
                "        Marca,",
                "        MedioPago,",
                "        NotificationToken,",
                "        Pedido,",
                "        Producto",
                "    };",
                "myDotDefinitions = {",
                "    definitions",
                "};",
                "console.log(myDotDefinitions);",
                "tv4.addSchema(\"MyDot\", myDotDefinitions);",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e351364e-29b5-4759-b463-fb15fcff4ccc",
              "type": "text/javascript",
              "exec": [
                "let Boton = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Los botones de un Cliente\",",
                "        \"properties\": {",
                "            \"comment\": {",
                "                \"description\": \"Comentario arbitrario en esta entidad\",",
                "                \"maxLength\": 512,",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"id\": {",
                "                \"maxLength\": 12,",
                "                \"type\": \"string\"",
                "            },",
                "            \"idCliente\": {",
                "                \"description\": \"ID del cliente que compró este dot\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"idDireccion\": {",
                "                \"description\": \"Dirección de despacho asociada a este botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"idMarca\": {",
                "                \"description\": \"Marca que limita los productos de este botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"idMediopago\": {",
                "                \"description\": \"Medio de pago asociado a este botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"isActive\": {",
                "                \"default\": true,",
                "                \"type\": \"boolean\"",
                "            },",
                "            \"nombreMarca\": {",
                "                \"description\": \"Marca del botón\",",
                "                \"maxLength\": 64,",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"saldo\": {",
                "                \"default\": 5000,",
                "                \"description\": \"Saldo a favor cargado en el botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 5,",
                "                \"maximum\": 99999,",
                "                \"minimum\": 0,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"ssid\": {",
                "                \"description\": \"SSID de la wifi asociada al botón\",",
                "                \"maxLength\": 128,",
                "                \"type\": [\"string\", \"null\"]",
                "            }",
                "        },",
                "        \"required\": [",
                "            \"id\",",
                "            \"idCliente\"",
                "        ],",
                "        \"type\": \"object\"",
                "    },",
                "",
                "    Cliente = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Usuarios finales del servicio myDot. Tienen la App instalada en su dispositivo\",",
                "        \"properties\": {",
                "            \"apellido\": {",
                "                \"maxLength\": 128,",
                "                \"type\": \"string\"",
                "            },",
                "            \"avatar\": {",
                "                \"default\": \"https://static.mydot.app/avatar.png\",",
                "                \"maxLength\": 512,",
                "                \"type\": \"string\"",
                "            },",
                "            \"despachoGratis\": {",
                "                \"default\": 1,",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"email\": {",
                "                \"format\": \"email\",",
                "                \"maxLength\": 36,",
                "                \"type\": \"string\"",
                "            },",
                "            \"id\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"id_direccion_default\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"id_mediopago_default\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"rut\": {",
                "                \"maxLength\": 12,",
                "                \"type\": \"string\"",
                "            },",
                "            \"telefono\": {",
                "                \"maxLength\": 15,",
                "                \"type\": \"string\"",
                "            },",
                "            \"updatedAt\": {",
                "                \"format\": \"date-time\",",
                "                \"type\": \"string\"",
                "            },",
                "            \"username\": {",
                "                \"maxLength\": 128,",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"required\": [",
                "            \"email\"",
                "        ],",
                "        \"type\": \"object\"",
                "    },",
                "",
                "    Direccion = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Las direcciones de un Cliente\",",
                "        \"properties\": {",
                "            \"comuna\": {",
                "                \"maxLength\": 64,",
                "                \"type\": \"string\"",
                "            },",
                "            \"conCobertura\": {",
                "                \"default\": false,",
                "                \"type\": \"boolean\"",
                "            },",
                "            \"direccion\": {",
                "                \"maxLength\": 65535,",
                "                \"type\": \"string\"",
                "            },",
                "            \"geom\": {",
                "                \"properties\": {",
                "                    \"lat\": {",
                "                        \"type\": \"number\"",
                "                    },",
                "                    \"lng\": {",
                "                        \"type\": \"number\"",
                "                    }",
                "                },",
                "                \"type\": \"object\"",
                "            },",
                "            \"id\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"instrucciones\": {",
                "                \"description\": \"Indicaciones para llegar, despachar, etc a esta dirección\",",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"idCliente\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "",
                "            \"lat\": {",
                "                \"default\": -70.38,",
                "                \"format\": \"float\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 80,",
                "                \"minimum\": -80,",
                "                \"type\": \"number\"",
                "            },",
                "            \"link\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"lng\": {",
                "                \"default\": -30.78,",
                "                \"format\": \"float\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 80,",
                "                \"minimum\": -80,",
                "                \"type\": \"number\"",
                "            },",
                "            \"numero\": {",
                "                \"description\": \"Si aplica, el depto, oficina, letra o numeración interior\",",
                "                \"maxLength\": 512,",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"pais\": {",
                "                \"maxLength\": 64,",
                "                \"type\": \"string\"",
                "            },",
                "            \"region\": {",
                "                \"maxLength\": 128,",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"required\": [",
                "            \"direccion\",",
                "            \"lng\",",
                "            \"lat\"",
                "        ],",
                "        \"type\": \"object\"",
                "    },",
                "",
                "    Marca = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Marcas de producto (pueden ser de un mismo fabricante)\",",
                "        \"properties\": {",
                "            \"categoriaPrincipal\": {",
                "                \"maxLength\": 64,",
                "                \"type\": \"string\"",
                "            },",
                "            \"id\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idFabricante\": {",
                "                \"format\": \"integer\",",
                "                \"type\": \"number\"",
                "            },",
                "            \"image\": {",
                "                \"maxLength\": 512,",
                "                \"type\": \"string\"",
                "            },",
                "            \"nombreMarca\": {",
                "                \"maxLength\": 65535,",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"required\": [",
                "            \"id\",",
                "            \"nombreMarca\",",
                "            \"idFabricante\"",
                "        ],",
                "        \"type\": \"object\"",
                "    },",
                "    MedioPago = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Los medios de pago de un Cliente\",",
                "        \"properties\": {",
                "            \"creditCardType\": {",
                "                \"default\": \"Visa\",",
                "                \"type\": \"string\"",
                "            },",
                "            \"id\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idCliente\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idEstado\": {",
                "                \"default\": 1,",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 2,",
                "                \"type\": \"number\"",
                "            },",
                "            \"last4CardDigits\": {",
                "                \"maxLength\": 4,",
                "                \"type\": \"string\"",
                "            },",
                "            \"nombreEstado\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"numero\": {",
                "                \"maxLength\": 20,",
                "                \"type\": \"string\"",
                "            },",
                "            \"ordenCompra\": {",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"responseCode\": {",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"responseMessage\": {",
                "                \"maxLength\": 65535,",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"username\": {",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"type\": \"object\"",
                "    },",
                "    NotificationToken = {",
                "        \"additionalProperties\": false,",
                "        \"properties\": {",
                "            \"access_token\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"config_props\": {",
                "                \"type\": \"object\"",
                "            },",
                "            \"createdAt\": {",
                "                \"format\": \"date-time\",",
                "                \"type\": \"string\"",
                "            },",
                "            \"deviceId\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"idCliente\": {",
                "                \"format\": \"double\",",
                "                \"type\": \"number\"",
                "            },",
                "            \"platform\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"topic\": {",
                "                \"type\": \"string\"",
                "            },",
                "            \"updatedAt\": {",
                "                \"format\": \"date-time\",",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"required\": [",
                "            \"deviceId\"",
                "        ],",
                "        \"type\": \"object\"",
                "    },",
                "    Pedido = {",
                "        \"additionalProperties\": true,",
                "        \"description\": \"Pedido generado por Botón o App. Sólo visible para Cliente dueño y Operadores\",",
                "        \"properties\": {",
                "            \"costoDespacho\": {",
                "                \"default\": 0,",
                "                \"description\": \"Costo del despacho, a priori cero para pedidos cuyo neto es mayor a 10.000\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 250000,",
                "                \"minimum\": 0,",
                "                \"type\": \"number\"",
                "            },",
                "            \"createdAt\": {",
                "                \"format\": \"date-time\",",
                "                \"type\": \"string\"",
                "            },",
                "            \"descuento\": {",
                "                \"default\": 0,",
                "                \"description\": \"Descuento aplicado por promociones o saldo a favor en el Botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 250000,",
                "                \"minimum\": 0,",
                "                \"type\": \"number\"",
                "            },",
                "            \"descuento_primer_pedido\": {",
                "                \"default\": 0,",
                "                \"description\": \"Descuento aplicado sobre el despacho en el primer pedido del cliente\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 250000,",
                "                \"minimum\": 0,",
                "                \"type\": \"number\"",
                "            },",
                "            \"id\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 5,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idBoton\": {",
                "                \"maxLength\": 12,",
                "                \"type\": [\"string\", \"null\"]",
                "            },",
                "            \"idCliente\": {",
                "                \"description\": \"ID del cliente que gatilla el pedido (se lee del token)\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idDireccion\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idEstado\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 9,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idMarca\": {",
                "                \"description\": \"Marca que limita los productos de este botón\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"idMediopago\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"idProducto\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 5,",
                "                \"maximum\": 10000,",
                "                \"minimum\": 1,",
                "                \"type\": [\"number\", \"null\"]",
                "            },",
                "            \"idTransaccion\": {",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 16,",
                "                \"maximum\": 8565073562300389,",
                "                \"minimum\": 1565000000000001,",
                "                \"type\": \"number\"",
                "            },",
                "            \"nombreMarca\": {",
                "                \"description\": \"Marca del los productos del pedido\",",
                "                \"maxLength\": 64,",
                "                \"type\": \"string\"",
                "            },",
                "            \"precioNeto\": {",
                "                \"description\": \"Precio neto, igual a la suma de los productos que componen el pedido\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 250000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"precioTotal\": {",
                "                \"description\": \"Precio a pagar por el pedido = (precio neto + costo despacho - descuento)\",",
                "                \"format\": \"integer\",",
                "                \"maxLength\": 7,",
                "                \"maximum\": 250000,",
                "                \"minimum\": 1,",
                "                \"type\": \"number\"",
                "            },",
                "            \"updatedAt\": {",
                "                \"format\": \"date-time\",",
                "                \"type\": \"string\"",
                "            }",
                "        },",
                "        \"type\": \"object\"",
                "    };",
                "",
                "let Producto = {",
                "    \"additionalProperties\": true,",
                "    \"description\": \"Los productos disponibles para comprar\",",
                "    \"properties\": {",
                "        \"descripcion\": {",
                "            \"maxLength\": 65535,",
                "            \"type\": \"string\"",
                "        },",
                "        \"descuento\": {",
                "            \"format\": \"integer\",",
                "            \"maxLength\": 7,",
                "            \"maximum\": 10000,",
                "            \"minimum\": 0,",
                "            \"type\": \"number\"",
                "        },",
                "        \"id\": {",
                "            \"format\": \"integer\",",
                "            \"maxLength\": 7,",
                "            \"maximum\": 10000,",
                "            \"minimum\": 1,",
                "            \"type\": \"number\"",
                "        },",
                "        \"idCategoria\": {",
                "            \"format\": \"integer\",",
                "            \"maxLength\": 7,",
                "            \"maximum\": 10000,",
                "            \"minimum\": 1,",
                "            \"type\": \"number\"",
                "        },",
                "        \"idMarca\": {",
                "            \"format\": \"integer\",",
                "            \"maxLength\": 7,",
                "            \"maximum\": 10000,",
                "            \"minimum\": 1,",
                "            \"type\": \"number\"",
                "        },",
                "        \"image\": {",
                "            \"format\": \"uri\",",
                "            \"maxLength\": 512,",
                "            \"type\": \"string\"",
                "        },",
                "        \"isButton\": {",
                "            \"description\": \"Define si el producto es un botón o un consumible\",",
                "            \"type\": \"boolean\"",
                "        },",
                "        \"nombreMarca\": {",
                "            \"description\": \"Marca del producto\",",
                "            \"maxLength\": 64,",
                "            \"type\": \"string\"",
                "        },",
                "        \"nombre_categoria\": {",
                "            \"maxLength\": 64,",
                "            \"type\": \"string\"",
                "        },",
                "        \"precioBase\": {",
                "            \"format\": \"integer\",",
                "            \"maxLength\": 7,",
                "            \"maximum\": 40000,",
                "            \"minimum\": 1,",
                "            \"type\": \"number\"",
                "        },",
                "        \"sku\": {",
                "            \"format\": \"[A-Z]{5,8}00\\\\w{2}\",",
                "            \"maxLength\": 24,",
                "            \"type\": \"string\"",
                "        }",
                "    },",
                "    \"required\": [",
                "        \"id\",",
                "        \"descripcion\",",
                "        \"idCategoria\",",
                "        \"idMarca\",",
                "        \"precioBase\",",
                "        \"descuento\"",
                "    ],",
                "    \"type\": \"object\"",
                "};",
                "pm.environment.set('definition.Producto', Producto);",
                "",
                "// Producto=pm.environment.get('definition.Producto'),",
                "",
                " ",
                "pm.environment.set('definition.Boton', Boton);",
                "pm.environment.set('definition.Cliente', Cliente);",
                "pm.environment.set('definition.Direccion', Direccion);",
                "pm.environment.set('definition.Marca', Marca);",
                "pm.environment.set('definition.MedioPago', MedioPago);",
                "pm.environment.set('definition.NotificationToken', NotificationToken);",
                "pm.environment.set('definition.Pedido', Pedido);",
                "",
                "postman.setNextRequest(null);",
                " "
              ]
            }
          }
        ]
      },
      {
        "name": "9_Endpoints_test_fin_pruebas",
        "item": [
          {
            "name": "9_0_Después de pruebas, saltar al final de las peticiones",
            "item": [
              {
                "name": "9_0_0_Server status - sólo para saltar al último request",
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b5f43a3-86ba-4d7f-862d-0d1d9fa98a27",
                      "type": "text/javascript",
                      "exec": [
                        "if (!pm.cookies.has('access_token')) {",
                        "    let api_test_url = pm.collectionVariables.get('api_test_url'),",
                        "        url = `${api_test_url}/api/Cliente/login?include=user`,",
                        "        email = pm.environment.get('emailCliente1'),",
                        "        password = pm.environment.get('passwordCliente1');",
                        "",
                        "    const echoPostRequest = {",
                        "        url,",
                        "        method: 'POST',",
                        "            header: 'Content-Type: application/json',",
                        "            body: {",
                        "                mode: 'raw',",
                        "                raw: JSON.stringify({",
                        "                    email, password",
                        "                })",
                        "            }",
                        "    };",
                        "",
                        "",
                        "    pm.sendRequest(echoPostRequest, function(err, res) {",
                        "        try {",
                        "            let jsonRes = res.json(),",
                        "                {",
                        "                    id: accessToken",
                        "                } = jsonRes || {};",
                        "            if (!err && accessToken) {",
                        "                pm.environment.set('bearerToken', btoa(accessToken));",
                        "                pm.environment.set('accessToken', accessToken);",
                        "                pm.iterationData.set('testStarted', 1);",
                        "            } else {",
                        "                throw err || new Error('No se pudo loguear');",
                        "            }",
                        "",
                        "        } catch (exception) {",
                        "            console.warn(exception);",
                        "            pm.variables.set('expectError', 'any');",
                        "            pm.variables.set('expectHeaders', [200, 400, 401, 403]);",
                        "        }",
                        "    });",
                        "}"
                      ]
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ab01158-26cb-4878-bf6e-fa6e3e1f0f6a",
                      "type": "text/javascript",
                      "exec": [
                        "postman.setNextRequest('Envía un mensaje cualquiera al API');"
                      ]
                    }
                  }
                ],
                "_postman_id": "97d56933-b8c9-4334-b86d-846bb47d8774",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{api_test_url}}/status",
                    "host": ["{{api_test_url}}"],
                    "path": ["status"]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "f4b5a097-cec2-453b-bead-b626ea4a5e91",
            "_postman_isSubFolder": true
          },
          {
            "name": "9_1_Custom Methods",
            "item": [
              {
                "name": "9_1_0_[Deprecated] Encuentra una Ventana Horaria por {{id}} en la BBDD.",
                "_postman_id": "69dc55e3-3625-4b03-9440-4fa34222e325",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/VentanaHoraria/:id?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","VentanaHoraria",":id"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idVentana}}",
                        "type": "string",
                        "description": "id Único de Ventana Horaria"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Dado que hoy Sólo existe una ventana horaria (la de entrega express)\n\nNo hay necesidad de filtrar ventanas por {{id}}. Este endpoint puede ser descontinuado en futuras versiones."
                },
                "response": []
              },
              {
                "name": "9_1_1_Lista pedidos (propios) dentro de una Ventana Horaria.",
                "_postman_id": "20497f88-fd0c-4d7c-8a7b-ea1dbcdd1b4f",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "GET",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": " ",
                      "key": "Authorization",
                      "value": "{{accessToken}}"
                    }
                  ],
                  "url": {
                    "raw": "{{api_test_url}}/api/VentanaHoraria/:id/pedidos?filter={{filter}}",
                    "host": ["{{api_test_url}}"],
                    "path": ["api","VentanaHoraria",":id","pedidos"],
                    "query": [
                      {
                        "description": "Opcional, filtro en forma de String JSON encoded",
                        "key": "filter",
                        "value": "{{filter}}"
                      }
                    ],
                    "variable": [
                      {
                        "key": "id",
                        "value": "{{idVentana}}",
                        "type": "string",
                        "description": "id Único de Ventana Horaria"
                      }
                    ]
                  },
                  "description": "**Deprecation Notice** Dado que hoy Sólo existe una ventana horaria (la de entrega express)\n\nNo hay necesidad de filtrar pedidos por ventana horaria. Este endpoint puede ser descontinuado en futuras versiones."
                },
                "response": []
              }
            ],
            "_postman_id": "91e70a67-6c6a-40af-8e4d-a7b78d5ded59",
            "description": "Métodos ajenos a las operaciones nativas del API destinados a proveer funcionalidades particulares",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04354fea-26a3-45ce-b1f9-0d61caa2f1ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00b85197-a8f5-4cab-aa5b-d880120dff6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "9_2_MyDot Proxy",
            "item": [
              {
                "name": "9_2_0_POST button click raw application/json Sample Button",
                "_postman_id": "655a5f80-18f7-4ef6-87ed-b66829281392",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "QetBIfCiBLUGRBpjj9vDYvmHHKCCW1wnMZnakaNHkusvPho7VmFfHgCUgbyLbfKe"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n     \"errorCode\": \"0\",\n    \"dmac\": \"70F11C0876FA\",\n    \"success\": \"1\",\n    \"firmwareMarking\": \"httpegt0\",\n    \"firmwareVersion\": \"0300\",\n    \"downloadType\": \"2\",\n    \"downloadAddress\": \"113.59.226.27:10123\",\n    \"followfirmwareNum\": \"2\",\n    \"firmwareNumber1\": \"1\",\n    \"firmwareType1\": \"0\",\n    \"firmwareSize1\": \"272308\",\n    \"downLicenseKey1\": \"0fb04dda7f904551922933c5201aa079\",\n    \"hashCode1\": \"13b444f946f64160\",\n    \"firmwareNumber2\": \"2\",\n    \"firmwareType2\": \"2\",\n    \"firmwareSize2\": \"272308\",\n    \"downLicenseKey2\": \"0c616ff7b0034a1abc107c9bf787f224\",\n    \"hashCode2\": \"2e3d721bf3c6f988\"\n    \n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/Term/TestOrder",
                    "host": ["{{api_test_url}}"],
                    "path": ["Term","TestOrder"]
                  }
                },
                "response": []
              },
              {
                "name": "9_2_1_POST button click raw application/json Sample Button Copy",
                "_postman_id": "60ae4f01-e546-494f-93fc-ec2b2cba0c77",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "QetBIfCiBLUGRBpjj9vDYvmHHKCCW1wnMZnakaNHkusvPho7VmFfHgCUgbyLbfKe"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": " {\n      \"dryRun\": true,\n      \"isSecret\": 0,\n      \"dmac\": \"{{idBoton}}\",\n      \"fromCountry\": \"CL\",\n      \"fromIp\": \"200.73.2.58\",\n      \"protocolType\": null,\n      \"firmwareMarking\": \"httpegt0\",\n      \"firmwareVersion\": \"0300\",\n      \"usedCount\": 0,\n      \"successCount\": 0,\n      \"isLowPower\": 0,\n      \"orderButton\": 0,\n      \"callButton\": 0,\n      \"orderCounts\": 0,\n      \"orderSerialList\": 0,\n      \"orderSerialCountList\": 0,\n      \"time_mark\": 1562003531584,\n      \"created_at\": \"2019-07-01 17:52:11\"\n    }",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{api_test_url}}/Term/RecvOrder",
                    "host": ["{{api_test_url}}"],
                    "path": ["Term","RecvOrder"]
                  }
                },
                "response": []
              },
              {
                "name": "9_2_2_POST button application/json first batch",
                "_postman_id": "a055d504-2bc0-4493-b7c9-3b6324f6e23a",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "QetBIfCiBLUGRBpjj9vDYvmHHKCCW1wnMZnakaNHkusvPho7VmFfHgCUgbyLbfKe"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n\t\"dryRun\":true,\n\t\"isSecret\": \"0\",\n      \"did\": \"197876\",\n      \"dmac\": \"{{idBoton}}\",\n      \"protocolType\": \"0100\",\n      \"deviceType\": \"0902\",\n      \"firmwareMarking\": \"EG003S02\",\n      \"firmwareVersion\": \"0201\",\n      \"productModel\": \"EG003S02\",\n      \"companyType\": \"00000001\",\n      \"companySerialNum\": \"00000001\",\n      \"customModel\": \"00000001\",\n      \"userMarking\": \"1\",\n      \"orderMarking\": \"16\",\n      \"usedCount\": \"119\",\n      \"successCount\": \"13\",\n      \"businessType\": \"1\",\n      \"isLowPower\": \"45\",\n      \"orderButton\": \"1\",\n      \"callButton\": \"0\",\n      \"orderCounts\": \"\",\n      \"orderSerialList\": \"\",\n      \"orderSerialCountList\": \"\",\n      \"md5\": \"97F5F03EA93EDA4AE313B2FDDC29A51C\"\n      \n    \n}",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{proxy_api_url}}/Term/RecvOrder",
                    "host": ["{{proxy_api_url}}"],
                    "path": ["Term","RecvOrder"]
                  }
                },
                "response": []
              },
              {
                "name": "9_2_3_POST button click raw application/json second batch",
                "_postman_id": "4fcc5f52-d249-463f-85c3-36658de1e428",
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                },
                "request": {
                  "method": "POST",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Authorization",
                      "value": "QetBIfCiBLUGRBpjj9vDYvmHHKCCW1wnMZnakaNHkusvPho7VmFfHgCUgbyLbfKe"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": " {\n      \"isSecret\": 0,\n      \"did\": \"200741\",\n      \"dmac\": \"70F11C82E31E\",\n      \"fromCountry\": \"CL\",\n      \"fromIp\": \"113.118.184.38\",\n      \"protocolType\": \"0100\",\n      \"deviceType\": \"0902\",\n      \"firmwareMarking\": \"EG003S02\",\n      \"firmwareVersion\": \"0201\",\n      \"productModel\": \"EG003S02\",\n      \"companyType\": \"ogemray\",\n      \"companySerialNum\": \"00000001\",\n      \"customModel\": \"00000001\",\n      \"userMarking\": \"5679\",\n      \"orderMarking\": \"32\",\n      \"usedCount\": 2,\n      \"successCount\": 1,\n      \"businessType\": \"1\",\n      \"isLowPower\": 93,\n      \"orderButton\": 1,\n      \"callButton\": 0,\n      \"orderCounts\": 0,\n      \"orderSerialList\": 0,\n      \"orderSerialCountList\": 0,\n      \"md5\": \"6727450656922C2CFB634223535E2B60\",\n      \"time_mark\": 1561692965402,\n      \"created_at\": \"2019-06-28 03:36:05\"\n    \n  }",
                    "options": {
                      "raw": {}
                    }
                  },
                  "url": {
                    "raw": "{{proxy_api_url}}/Term/RecvOrder",
                    "host": ["{{proxy_api_url}}"],
                    "path": ["Term","RecvOrder"]
                  }
                },
                "response": []
              }
            ],
            "_postman_id": "6b299570-d142-4b4c-8769-65b7b51df3de",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5df43b2-981a-4b96-b712-c6573ffaee24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b0267aa-3a0d-49a4-96c5-c23e467c1138",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_isSubFolder": true
          },
          {
            "name": "9_3_Un nuevo Cliente se registra en la Aplicación",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20470a51-c342-4eaf-b8ea-44ed81f3c6d9",
                  "type": "text/javascript",
                  "exec": [
                    "let     newUsers = pm.environment.get('newUsers') || {},",
                    "    randomNumber = parseInt(Math.random() * 10000, 10);",
                    "",
                    " ",
                    "    function createApellido(length) {",
                    "        var result = '';",
                    "        var characters = 'abcdefghijklmnopqrstuvwxyzabcdefgaijolmnopurstuveiyz';",
                    "        var charactersLength = characters.length;",
                    "        for (var i = 0; i < length; i++) {",
                    "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                    "        }",
                    "        let initial = characters.charAt(Math.floor(Math.random() * charactersLength)).toUpperCase();",
                    "        return initial + result;",
                    "    }",
                    "",
                    "",
                    "",
                    "pm.environment.set('createApellido', createApellido.toString() );",
                    "let apellido = createApellido(6);",
                    "",
                    " ",
                    "let    newUserEmail = 'fff+' + apellido + '@ctohm.com',",
                    "    newUsername = 'FFF ' + apellido,",
                    "    newUserPassword = CryptoJS.SHA1(apellido + randomNumber);",
                    "",
                    "newUsers[newUserEmail] = newUserPassword;",
                    "",
                    "pm.environment.set('newUsers', newUsers);",
                    "",
                    "",
                    "pm.variables.set('newUserEmail', newUserEmail);",
                    "pm.variables.set('newUsername', newUsername);",
                    "pm.variables.set('newUserPassword', newUserPassword);"
                  ]
                }
              }
            ],
            "_postman_id": "8a9648f2-dbb8-407f-b60c-1a6cbf722465",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{newUserEmail}}\",\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"{{newUserPassword}}\"\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente"]
              }
            },
            "response": []
          },
          {
            "name": "9_4_Cliente Confirma registro siguiendo un link.",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f216583d-334d-4076-a763-978e5104fec1",
                  "type": "text/javascript",
                  "exec": [
                    " pm.environment.set('redirect',\"{{api_test_url}}\"+\"/confirmacion_exitosa\");",
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "e4614eff-2932-47e8-8064-6595e1c729de",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "GET",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/confirm?uid={{idCliente}}&token={{verificationToken}}&redirect={{redirect}}",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","confirm"],
                "query": [
                  {
                    "description": "ID del usuario que solicitó la verificación",
                    "key": "uid",
                    "value": "{{idCliente}}"
                  },
                  {
                    "description": "token temporal de verificación",
                    "key": "token",
                    "value": "{{verificationToken}}"
                  },
                  {
                    "description": "destino de redirección luego de confirmar exitosamente",
                    "key": "redirect",
                    "value": "{{redirect}}"
                  }
                ]
              },
              "description": "Opcionalmente se puede redirigir al usuario a otra URL"
            },
            "response": []
          },
          {
            "name": "9_5_Cliente se registra o inicia sesión usando facebook",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8046bb93-8497-4ed2-b505-4ac13c7ce712",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "8bc36f89-d2e6-42f6-be0f-c269b07959d0",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n\t\"access_token\":\"{{facebookToken}}\"\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/fbauth",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","fbauth"]
              },
              "description": "La petición envía un token de corta duración (2 horas) obtenido desde Facebook. \n\nLa respuesta envía en cambio un token de larga duración extendido en el backend por 60 días."
            },
            "response": []
          },
          {
            "name": "9_6_Cliente autenticado cierra sesión",
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "748d913d-5137-4e4e-8cd2-f2679e5ca463",
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.set('wrongToken','wrongToken');",
                    "pm.variables.set('expectError',true);",
                    "pm.variables.set('expectHeaders',[204,401]);",
                    "",
                    "pm.variables.set('originalToken', pm.environment.get('accessToken'));",
                    "pm.environment.set('bearerToken', btoa('wrongToken'));",
                    "pm.environment.set('accessToken', btoa('wrongToken'));"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "985b04ba-b2c7-4754-a736-121598938860",
                  "type": "text/javascript",
                  "exec": [
                    "let accessToken= pm.variables.get('originalToken');",
                    "pm.variables.unset('originalToken');",
                    "pm.environment.set('accessToken', accessToken);",
                    "pm.environment.set('bearerToken', btoa(accessToken));",
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "0013d09b-7a9e-40fd-898f-8f4fcee136ea",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "{{wrongToken}}"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/logout",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","logout"]
              }
            },
            "response": []
          },
          {
            "name": "9_7_Restablece contraseña usando un token temporal",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "386ef124-b8b5-4ff9-8312-b93783a902a1",
                  "type": "text/javascript",
                  "exec": [
                    "let currentUser=pm.variables.get('currentUser'),",
                    "    clientesObject = pm.variables.get('clientesObject');",
                    "    ",
                    "",
                    "pm.test('Status code is 204', function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "",
                    "pm.test('CurrentUser has been populated', function () {",
                    "    pm.expect(typeof currentUser).to.eql('object');",
                    "    pm.expect(typeof currentUser.idCliente).to.eql('number');",
                    "    currentUser.pass = pm.variables.get('newPassword');",
                    "    pm.environment.set('idCliente', currentUser.idCliente);   ",
                    "    pm.environment.set('currentUser', ( currentUser ));   ",
                    "    pm.environment.set('clientesObject', ( clientesObject )); ",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e761f04a-3362-4daa-9299-488540d23e38",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "",
                    "var currentUser = pm.variables.get('currentUser'),",
                    "    newPassword = currentUser.pass || pm.environment.get('passwordCliente1');",
                    "",
                    "currentUser.pass = newPassword;",
                    "pm.variables.set('currentUser',currentUser);",
                    "pm.variables.set('currentUserMail',currentUser.email);",
                    "pm.variables.set('newPassword',newPassword);",
                    "",
                    "",
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "36e822d8-7718-4d03-8e88-74ff9d421fbe",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": " ",
                  "key": "Authorization",
                  "value": "{{authorizationToken}}"
                }
              ],
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "newPassword",
                    "value": "{{newPassword}}"
                  }
                ],
                "options": {
                  "urlencoded": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/reset-password",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","reset-password"]
              },
              "description": "Este endpoint permitiría implementar el flujo de recuperar contraseña.\n\nEl usuario habría seguido un link de recuperación de contraseña enviado a su correo.\n\nAl pincharlo, llega a una pantalla en donde está **autenticado temporalmente.**\n\nEn esa pantalla puede escribir su nueva contraseña y enviarla al presente endpoint para persirtirla\n\nEsta pantalla no debe mostrarse a un usuario que está **autenticado normalmente** dado que se presta para uso malicioso."
            },
            "response": []
          },
          {
            "name": "9_8_Cliente logueado cambia su contraseña en un formulario",
            "_postman_id": "c453fad2-110e-4284-a189-090f30d51124",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                },
                {
                  "description": " ",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": "password  actual",
                    "key": "oldPassword",
                    "value": "{{Password Actual}}"
                  },
                  {
                    "description": "nuevo password",
                    "key": "newPassword",
                    "value": "{{Nuevo Password}}"
                  }
                ],
                "options": {
                  "urlencoded": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/change-password",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","change-password"]
              },
              "description": "Para implementar la funcionalidad de que el cliente modificara su contraseña, \n\neste endpoint debiera ser utilizado por un formularoi en donde un cliente\n\n**autenticado normalmente**  confirme su contraseña actual y escriba la nueva.\n\n(La implementación de Front definirá si debe pedírsele que repita la nueva contraseña)"
            },
            "response": []
          },
          {
            "name": "9_9_Operador dashboard inicia sesión",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8046bb93-8497-4ed2-b505-4ac13c7ce712",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('JSON response can be decoded', function() {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData).to.be.a('object');",
                    "    pm.expect(jsonData).to.be.a('object');",
                    "    pm.expect(jsonData.id).to.be.a('string');",
                    "    pm.expect(jsonData.userId).to.be.a('number');",
                    "    pm.environment.set('tokenCliente', jsonData.id);",
                    "    pm.environment.set('bearerToken', btoa(jsonData.id));",
                    "    pm.environment.set('accessToken', jsonData.id);",
                    "    pm.environment.set('idCliente', jsonData.userId);",
                    "    pm.test('Status code is 200', function() {",
                    "        pm.response.to.have.status(200);",
                    "    });",
                    "});"
                  ]
                }
              }
            ],
            "_postman_id": "aa7d7fd9-5ac1-4273-a784-9bdde30849f4",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"email\":\"{{emailAdmin}}\", \"password\":\"{{passwordAdmin}}\"}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","login"],
                "query": [
                  {
                    "key": "include",
                    "value": "user"
                  }
                ]
              }
            },
            "response": []
          },
          {
            "name": "9_10_Cliente (8) Inicia sesión usando email y password",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8046bb93-8497-4ed2-b505-4ac13c7ce712",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = JSON.parse(responseBody);",
                    "pm.environment.set('tokenCliente', jsonData.id);",
                    "pm.environment.set('bearerToken', btoa(jsonData.id));",
                    "pm.environment.set('accessToken', jsonData.id);",
                    "pm.environment.set('idCliente', jsonData.userId);",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ]
                }
              }
            ],
            "_postman_id": "04a2fd88-340a-4493-b5a3-f535058214de",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "POST",
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\"email\":\"{{emailCliente}}\", \"password\":\"{{passwordCliente}}\"}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/login?include=user",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente","login"],
                "query": [
                  {
                    "description": "incluye datos del usuario en la respuesta",
                    "key": "include",
                    "value": "user"
                  }
                ]
              }
            },
            "response": []
          },
          {
            "name": "9_11_Gatilla la verificación de la cuenta de usuario",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45071001-c8b4-4cf3-ae82-52c599f03b16",
                  "type": "text/javascript",
                  "exec": [
                    " ",
                    "",
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "",
                    "    pm.test('Content-Type is application/json', function () {",
                    "        ",
                    "       pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "        ",
                    "        pm.test('JSON response can be decoded ', function () {",
                    "            var jsonData = pm.response.json();",
                    "            pm.expect(jsonData).to.be.a('object');",
                    "            ",
                    "            pm.test('JSON response has id', function () {",
                    "                console.log('id:' +  jsonData.id);",
                    "                pm.expect(typeof jsonData.verificationToken).to.eql('string');",
                    "                pm.environment.set('verificationToken', jsonData.verificationToken);",
                    "                ",
                    "               ",
                    "                ",
                    "            });",
                    "        });",
                    "    });",
                    "});",
                    ""
                  ]
                }
              }
            ],
            "_postman_id": "cdc3ee3b-901f-41d5-a3bd-f6bc5859d04c",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/:id/verify",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente",":id","verify"],
                "variable": [
                  {
                    "key": "id",
                    "value": "{{idCliente}}",
                    "type": "string",
                    "description": "id Único de Cliente"
                  }
                ]
              }
            },
            "response": []
          },
          {
            "name": "9_12_Enviar mensaje push a un grupo arbitrario",
            "_postman_id": "fe6c2d94-9a84-459b-9e99-f29d42d6d8d7",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n   \"notification_key\": \"{{notification_key}}\",\n    \"data\": {\n        \"name\": \"wrench\",\n        \"mass\": \"1.3kg\",\n        \"count\": \"3\",\n        \"timestamp\": \"2019-10-25T16:19:21.791Z\",\n        \"notification_type\": \"prueba_mydot\"\n    },\n    \"notification\": {\n        \"title\": \"Prueba ofertas MyDot\",\n        \"body\": \"Este es un mensaje de prueba, no se asusten\"\n    },\n    \"android\": {\n        \"collapse_key\": \"Nuevos descuentos en MyDot\",\n        \"ttl\": 7600000,\n        \"priority\": \"HIGH\",\n        \"notification\": {\n            \"event_time\": \"2019-10-25T16:19:21.791Z\",\n            \"visibility\": \"PUBLIC\",\n            \"notification_priority\": \"PRIORITY_HIGH\",\n            \"icon\": \"fcm_push_icon\",\n            \"tag\": \"mydot\",\n            \"color\": \"#55A07A\",\n            \"sound\": \"default\"\n        },\n        \"fcm_options\": {\n            \"analytics_label\": \"ofertas_nespresso\"\n        }\n    },\n    \"webpush\": {\n        \"headers\": {\n            \"TTL\": \"120\",\n            \"Urgency\": \"high\",\n            \"Topic\": \"mydot\"\n        },\n        \"notification\": {\n            \"badge\": \"fcm_push_icon.png\",\n            \"icon\": \"img/icons/android-icon-72x72.png\",\n            \"tag\": \"mydot\",\n            \"timestamp\": 1572020361791,\n            \"vibrate\": [\n                200,\n                100,\n                200\n            ]\n        },\n        \"fcm_options\": {\n            \"link\": \"https://dashboard-dev.mydot.app/pedidos/654\",   \"analytics_label\": \"ofertas_nespresso\"\n        }\n    },\n    \"apns\": {\n        \"headers\": {\n            \"apns-priority\": \"10\",\n            \"apns-collapse-id\": \"Nuevos descuentos en MyDot\"\n        },\n        \"fcm_options\": {\n        \"analytics_label\": \"ofertas_nespresso\"\n    }\n    },\n    \"fcm_options\": {\n        \"analytics_label\": \"ofertas_nespresso\"\n    },\n    \n     \"options\":{ \"dryRun\":true}\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Cliente/:id/notification_token/sendToDeviceGroup",
                "host": ["{{api_test_url}}"],
                "path": ["api","Cliente",":id","notification_token","sendToDeviceGroup"],
                "variable": [
                  {
                    "key": "id",
                    "value": "{{idCliente}}",
                    "type": "string",
                    "description": "id Único de Cliente"
                  }
                ]
              },
              "description": "Este endpoint requiere especificar el token."
            },
            "response": []
          },
          {
            "name": "9_13_POST button click raw application/json second batch",
            "_postman_id": "4fd9fd70-ebfd-43f9-9d63-427651925c59",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "QetBIfCiBLUGRBpjj9vDYvmHHKCCW1wnMZnakaNHkusvPho7VmFfHgCUgbyLbfKe"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": " {\n      \"isSecret\": 0,\n      \"did\": \"200741\",\n      \"dmac\": \"70F11C82E38C\",\n      \"fromCountry\": \"CL\",\n      \"fromIp\": \"113.118.184.38\",\n      \"protocolType\": \"0100\",\n      \"deviceType\": \"0902\",\n      \"firmwareMarking\": \"EG003S02\",\n      \"firmwareVersion\": \"0201\",\n      \"productModel\": \"EG003S02\",\n      \"companyType\": \"ogemray\",\n      \"companySerialNum\": \"00000001\",\n      \"customModel\": \"00000001\",\n      \"userMarking\": \"5679\",\n      \"orderMarking\": \"32\",\n      \"usedCount\": 2,\n      \"successCount\": 1,\n      \"businessType\": \"1\",\n      \"isLowPower\": 93,\n      \"orderButton\": 1,\n      \"callButton\": 0,\n      \"orderCounts\": 0,\n      \"orderSerialList\": 0,\n      \"orderSerialCountList\": 0,\n      \"md5\": \"6727450656922C2CFB634223535E2B60\",\n      \"time_mark\": 1561692965402,\n      \"created_at\": \"2019-06-28 03:36:05\"\n    \n  }",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/Term/RecvOrder",
                "host": ["{{api_test_url}}"],
                "path": ["Term","RecvOrder"]
              }
            },
            "response": []
          },
          {
            "name": "9_14_Envía un mensaje cualquiera al API",
            "_postman_id": "715e473f-ab02-49e2-8c6a-9a02adc42e5a",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "description": "Access token Oauth 2.0",
                  "key": "Authorization",
                  "value": "{{accessToken}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"id\": 5,\n    \"direccion\": \"Agustín del Castillo 2245\",\n    \"numero\": \"2245\",\n    \"instrucciones\": \"No se puede entrar después de las 21 hrs\",\n    \"conCobertura\": true,\n    \"comuna\": \"VITACURA\",\n    \"region\": \"Región Metropolitana de Santiago de Chile\",\n    \"pais\": \"CL\",\n    \"lng\": -70.5462291,\n    \"lat\": -33.4249376,\n    \"geom\": {\n        \"lng\": -70.5462291,\n        \"lat\": -33.4249376\n    }\n}",
                "options": {
                  "raw": {}
                }
              },
              "url": {
                "raw": "{{api_test_url}}/api/Misc/echo",
                "host": ["{{api_test_url}}"],
                "path": ["api","Misc","echo"]
              },
              "description": "Verifica si una direccion tiene cobertura"
            },
            "response": []
          }
        ],
        "_postman_id": "f943f5f0-163b-490a-82df-545c9a5bb61f",
        "description": "Requests generados sólo para efectos de los tests. No se usan en producción ni estarán ahí mucho tiempo",
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c7fc3f-16e5-4966-abf3-624eb85838d9",
              "type": "text/javascript",
              "exec": [
                "postman.setNextRequest(null);"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "629e554d-8d60-41d4-b36b-58edd1a0e6c2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "key": "token",
          "value": "{{bearerToken}}",
          "type": "string"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "a36c1967-de27-401f-ba70-780caee43416",
          "type": "text/javascript",
          "exec": [
            "",
            "",
            "if (!pm.collectionVariables) {",
            "  pm.collectionVariables = {",
            "    set: function() {},",
            "    get: function() {",
            "      return false;",
            "    },",
            "    has: function() {",
            "      return false;",
            "    }",
            "  };",
            "}",
            "",
            "",
            "",
            "",
            "pm.variables.set('expectError', false);",
            "pm.variables.unset('expectHeaders');",
            "Array.prototype.getRandom = function() {",
            "  return this[Math.floor(this.length * (Math.random() * 0.999))];",
            "};",
            "Array.prototype.spliceRandom = function() {",
            "  return this.splice(Math.floor(this.length * (Math.random() * 0.999)), 1)[0];",
            "};",
            "",
            "_.populate = (varname, varspace, obj = {}) => {",
            "  obj[varname] = varspace.has(varname) && varspace.get(varname);",
            "  return obj;",
            "};",
            "_.persist = (varspace, varname, obj = {}) => {",
            "  if (obj[varname] !== undefined) {",
            "    varspace.set(varname, obj[varname]);",
            "  }",
            "};",
            "_.testNonEmptyArray = (keyValueObj = {}) => {",
            "  _.each(keyValueObj, (value, key) => {",
            "    pm.test(`${key} [${value.join(',')}] is an array`, () => {",
            "      pm.expect(Array.isArray(value)).to.be.true;",
            "    });",
            "    pm.test(`${key} (length:${value.length}) is not empty`, () => {",
            "      pm.expect(value.length > 0).to.be.true;",
            "    });",
            "  });",
            "};",
            "_.testSetAndBelongsTo = (mustExist, mustBelong, mustNotBelong = null) => {",
            "  let [mustExistName, mustExistValue] = Object.entries(mustExist)[0],",
            "    [mustBelongName, mustBelongValue] = Object.entries(mustBelong)[0];",
            "",
            "  pm.test(`${mustExistName} (${mustExistValue}) is set`, () => {",
            "    pm.expect(mustExistValue).not.to.eq(undefined);",
            "  });",
            "  pm.test(`${mustBelongName} contains ${mustExistName}`, () => {",
            "    pm.expect(mustBelongValue).to.include(mustExistValue);",
            "  });",
            "",
            "  if (mustNotBelong) {",
            "    let [mustNotBelongName, mustNotBelongValue] = Object.entries(",
            "      mustNotBelong",
            "    )[0];",
            "    pm.test(`${mustNotBelongName} DOES NOT contain ${mustExistName}`, () => {",
            "      pm.expect(mustNotBelongValue).not.to.include(mustExistValue);",
            "    });",
            "  }",
            "};",
            "",
            "const ambiente =",
            "  (pm.iterationData && pm.iterationData.get('ambiente')) ||",
            "  (pm.globals && pm.globals.get('ambiente')) ||",
            "   (pm.collectionVariables && pm.collectionVariables.get('ambiente')) ||",
            "  'develop';",
            "",
            "const api_test_url =",
            "  (pm.environment.get('force_collection_endpoint')) ||",
            "  (pm.iterationData && pm.iterationData.get('api_test_url') ) ||",
            "  (pm.globals && pm.globals.get('api_test_url') )||",
            "  (ambiente === 'local'",
            "    ? (pm.collectionVariable && pm.collectionVariables.get('api_local_url'))",
            "    : (pm.collectionVariable && pm.collectionVariables.get('api_dev_url'))) ||",
            "  (pm.collectionVariable && pm.collectionVariables.get('api_test_url')) ||",
            "  'https://api-dev.mydot.app';",
            "",
            "pm.collectionVariables.set('api_test_url', api_test_url);",
            "console.log({ambiente, api_test_url});",
            "",
            "pm.variables.set('expected_contentType','application/json');",
            ""
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "e6661889-d4c9-4d85-b125-aacd05b6b2ff",
          "type": "text/javascript",
          "exec": [
            "",
            "",
            "",
            "",
            "",
            "pm.environment.set('filter','');",
            "pm.variables.set('filter','');",
            "",
            "",
            "_.testSchema = (data, schema) => {",
            "  pm.test('Schema is valid', function() {",
            "    let isValid = tv4.validate(data, schema);",
            "    if (!isValid) {",
            "      console.warn(tv4.error);",
            "    }",
            "    pm.expect(isValid).to.be.true;",
            "  });",
            "};",
            "",
            "const Boton = pm.environment.get('definition.Boton'),",
            "  Cliente = pm.environment.get('definition.Cliente'),",
            "  Direccion = pm.environment.get('definition.Direccion'),",
            "  Marca = pm.environment.get('definition.Marca'),",
            "  MedioPago = pm.environment.get('definition.MedioPago'),",
            "  Producto = pm.environment.get('definition.Producto'),",
            "  NotificationToken = pm.environment.get('definition.NotificationToken'),",
            "  Pedido = pm.environment.get('definition.Pedido'),",
            "  myDotDefinitions = {",
            "    definitions: {",
            "      Boton,",
            "      Cliente,",
            "      Direccion,",
            "      Marca,",
            "      MedioPago,",
            "      NotificationToken,",
            "      Pedido,",
            "      Producto",
            "    }",
            "  };",
            "",
            "tv4.addSchema('MyDot', myDotDefinitions);",
            "",
            "let clientesObject = pm.environment.get('clientesObject'),",
            "  currentUser = pm.environment.get('currentUser');",
            "",
            "pm.variables.set('filter','');",
            "//console.log('collection test',{clientesObject,currentUser});",
            "",
            "let expectError = pm.variables.get('expectError'),",
            "  expectedHeaders = pm.variables.get('expectHeaders') || [200, 204, 301, 302];",
            "",
            "pm.test(",
            "  'Collection: Response status code is in  [' +",
            "    expectedHeaders.join(', ') +",
            "    ']',",
            "  function() {",
            "    pm.expect(pm.response.code).to.be.oneOf(expectedHeaders);",
            "  }",
            ");",
            "let ensure = expectError === 'any' ? ' ignore wether ' : ' ensure ',",
            "  doesornot = '';",
            "if (expectError === 'any') {",
            "  doesornot = ' or does not ';",
            "} else if (!expectError) {",
            "  doesornot = '  not ';",
            "}",
            "",
            "pm.test(",
            "  'Collection:' + ensure + ' response does ' + doesornot + ' contains error  ',",
            "  () => {",
            "    let responseText = pm.response.text().toLowerCase();",
            "    if (expectError === 'any') {",
            "      pm.expect(true).to.be.true;",
            "    } else if (expectError) {",
            "      pm.expect(responseText).to.include('error');",
            "    } else {",
            "      pm.expect(responseText).to.not.include('error');",
            "    }",
            "  }",
            ");",
            ""
          ]
        }
      }
    ],
    "variable": [
      {
        "id": "03688255-80f9-458e-a274-95ac82d06be8",
        "key": "ambiente",
        "value": "develop",
        "type": "string"
      },
      {
        "id": "fa9e660a-0f2f-4aa8-8d8f-cde77d06ed0c",
        "key": "estadoPedido",
        "value": 3,
        "type": "number"
      },
      {
        "id": "5f1062a0-3934-4bda-98f6-a79c04cab13c",
        "key": "idEstado",
        "value": "2",
        "type": "string"
      },
      {
        "id": "1ad4aff3-ce47-4675-93d9-437d9607194d",
        "key": "api_test_url",
        "value": "https://api-dev.mydot.app",
        "type": "string"
      },
      {
        "id": "03d4c426-4a16-4496-bbe8-422d111085d5",
        "key": "api_dev_url",
        "value": "https://api-dev.mydot.app",
        "type": "string"
      },
      {
        "id": "5a380c8f-8281-4a2c-9c3f-ef0318a1e085",
        "key": "api_local_url",
        "value": "https://apilocal.mydot.app",
        "type": "string"
      },
      {
        "id": "d74351a1-db74-4e87-a806-a232b5529c23",
        "key": "nuevas_direcciones",
        "value": [
          {
            "direccion": "Augusto Leguía Norte, Las Condes, Chile",
            "lat": -33.414699,
            "lng": -70.5979463,
            "numero": "255"
          },
          {
            "direccion": "Avenida Apoquindo 5950, Las Condes, Chile",
            "lat": -33.4090248,
            "lng": -70.5688699,
            "numero": "Piso 15"
          },
          {
            "direccion": "Avenida Apoquindo, Las Condes, Chile",
            "lat": -33.4108191,
            "lng": -70.5742302,
            "numero": "6797"
          },
          {
            "direccion": "Avenida Manquehue Norte 952, Las Condes, Chile",
            "lat": -33.3996363,
            "lng": -70.5716402,
            "numero": "Departamento 902"
          },
          {
            "direccion": "Avenida Presidente Riesco 7187, Las Condes, Chile",
            "lat": -33.3972544,
            "lng": -70.5587748,
            "numero": "7187"
          },
          {
            "direccion": "Benjamin 2940, Las Condes, Chile",
            "lat": -33.4132526,
            "lng": -70.6012773,
            "numero": "Depto 1002"
          },
          {
            "direccion": "Cerro Colorado 6028, Las Condes, Chile",
            "lat": -33.4007323,
            "lng": -70.5719202,
            "numero": "910"
          },
          {
            "direccion": "Cerro El Plomo 5420, Las Condes, Chile",
            "lat": -33.4057396,
            "lng": -70.5749252,
            "numero": "Oficina 1108"
          },
          {
            "direccion": "El Dante 4241, Las Condes, Chile",
            "lat": -33.4119582,
            "lng": -70.5880782,
            "numero": "401"
          },
          {
            "direccion": "Enrique Foster Norte 211, Las Condes, Chile",
            "lat": -33.4134333,
            "lng": -70.5945848,
            "numero": "402"
          },
          {
            "direccion": "Fray Luis de León 12281, Las Condes, Chile",
            "lat": -33.3754726,
            "lng": -70.5174286,
            "numero": "12281"
          },
          {
            "direccion": "Isidora Goyenechea, Las Condes, Chile",
            "lat": -33.4142493,
            "lng": -70.5990251,
            "numero": "3000"
          },
          {
            "direccion": "La Gioconda 4220, Las Condes, Chile",
            "lat": -33.4130798,
            "lng": -70.5874725,
            "numero": "72"
          },
          {
            "direccion": "Los Militares 5225, Las Condes, Chile",
            "lat": -33.4080407,
            "lng": -70.5753435,
            "numero": "605 "
          },
          {
            "direccion": "Luis Matte Larrain 9572",
            "lat": -33.4054435,
            "lng": -70.5360806,
            "numero": "9572"
          },
          {
            "direccion": "Neveria 5357, Las Condes, Chile",
            "lat": -33.4120373,
            "lng": -70.5723819,
            "numero": "5357"
          },
          {
            "direccion": "Rosario Norte 410, Las Condes, Chile",
            "lat": -33.4055874,
            "lng": -70.5725745,
            "numero": "141"
          },
          {
            "direccion": "Warren Smith 107, Las Condes, Chile",
            "lat": -33.4085403,
            "lng": -70.5747858,
            "numero": "Depto 155"
          }
        ],
        "type": "any"
      }
    ]
  }
}